// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: network.proto

package v1

import (
	context "context"
	fmt "fmt"
	v1 "github.com/arangodb-managed/apis/common/v1"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// IsPrivateEndpointServiceFeatureAvailableRequest specifies the request parameters for the IsPrivateEndpointServiceFeatureAvailable method.
type IsPrivateEndpointServiceFeatureAvailableRequest struct {
	// Identifier of the deployment
	DeploymentId         string   `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsPrivateEndpointServiceFeatureAvailableRequest) Reset() {
	*m = IsPrivateEndpointServiceFeatureAvailableRequest{}
}
func (m *IsPrivateEndpointServiceFeatureAvailableRequest) String() string {
	return proto.CompactTextString(m)
}
func (*IsPrivateEndpointServiceFeatureAvailableRequest) ProtoMessage() {}
func (*IsPrivateEndpointServiceFeatureAvailableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{0}
}
func (m *IsPrivateEndpointServiceFeatureAvailableRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsPrivateEndpointServiceFeatureAvailableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsPrivateEndpointServiceFeatureAvailableRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsPrivateEndpointServiceFeatureAvailableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsPrivateEndpointServiceFeatureAvailableRequest.Merge(m, src)
}
func (m *IsPrivateEndpointServiceFeatureAvailableRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsPrivateEndpointServiceFeatureAvailableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsPrivateEndpointServiceFeatureAvailableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsPrivateEndpointServiceFeatureAvailableRequest proto.InternalMessageInfo

func (m *IsPrivateEndpointServiceFeatureAvailableRequest) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

// IsPrivateEndpointServiceFeatureAvailableResult specifies if the private endpoint service is enabled and available for the specific deployment.
// If it is not available it contains a message why not.
type IsPrivateEndpointServiceFeatureAvailableResult struct {
	// Set if the feature is enabled and available.
	Available bool `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	// Message why the feature is not available.
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsPrivateEndpointServiceFeatureAvailableResult) Reset() {
	*m = IsPrivateEndpointServiceFeatureAvailableResult{}
}
func (m *IsPrivateEndpointServiceFeatureAvailableResult) String() string {
	return proto.CompactTextString(m)
}
func (*IsPrivateEndpointServiceFeatureAvailableResult) ProtoMessage() {}
func (*IsPrivateEndpointServiceFeatureAvailableResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{1}
}
func (m *IsPrivateEndpointServiceFeatureAvailableResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsPrivateEndpointServiceFeatureAvailableResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsPrivateEndpointServiceFeatureAvailableResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsPrivateEndpointServiceFeatureAvailableResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsPrivateEndpointServiceFeatureAvailableResult.Merge(m, src)
}
func (m *IsPrivateEndpointServiceFeatureAvailableResult) XXX_Size() int {
	return m.Size()
}
func (m *IsPrivateEndpointServiceFeatureAvailableResult) XXX_DiscardUnknown() {
	xxx_messageInfo_IsPrivateEndpointServiceFeatureAvailableResult.DiscardUnknown(m)
}

var xxx_messageInfo_IsPrivateEndpointServiceFeatureAvailableResult proto.InternalMessageInfo

func (m *IsPrivateEndpointServiceFeatureAvailableResult) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

func (m *IsPrivateEndpointServiceFeatureAvailableResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// PrivateEndpointService represents the service part of the private endpoint
type PrivateEndpointService struct {
	// System identifier of the private endpoint service.
	// This is a read-only value.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// URL of this resource.
	// This is a read-only value.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Name of the private endpoint service.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the private endpoint service.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The creation timestamp of the private endpoint service
	// This is a read-only value.
	CreatedAt *types.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The deletion timestamp of the private endpoint service
	// This is a read-only value.
	DeletedAt *types.Timestamp `protobuf:"bytes,6,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// Set when this private endpoint service is deleted.
	// This is a read-only value.
	IsDeleted bool `protobuf:"varint,7,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	// Identifier of the deployment
	// After creation, this value cannot be changed.
	DeploymentId string `protobuf:"bytes,10,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// Zero or more DNS names to include in the TLS certificate of the deployment.
	// This name should be resolvable in the private network (vNET/VPC) and can be used to connect
	// to the private endpoint to establish a SSL connection (where the name will be used during the handshake).
	AlternateDnsNames []string `protobuf:"bytes,11,rep,name=alternate_dns_names,json=alternateDnsNames,proto3" json:"alternate_dns_names,omitempty"`
	// Specific AKS setting.
	Aks *PrivateEndpointService_Aks `protobuf:"bytes,20,opt,name=aks,proto3" json:"aks,omitempty"`
	// Status of the private endpoint service.
	// All fields are read-only.
	Status               *PrivateEndpointService_Status `protobuf:"bytes,100,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *PrivateEndpointService) Reset()         { *m = PrivateEndpointService{} }
func (m *PrivateEndpointService) String() string { return proto.CompactTextString(m) }
func (*PrivateEndpointService) ProtoMessage()    {}
func (*PrivateEndpointService) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{2}
}
func (m *PrivateEndpointService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateEndpointService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateEndpointService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateEndpointService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateEndpointService.Merge(m, src)
}
func (m *PrivateEndpointService) XXX_Size() int {
	return m.Size()
}
func (m *PrivateEndpointService) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateEndpointService.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateEndpointService proto.InternalMessageInfo

func (m *PrivateEndpointService) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PrivateEndpointService) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *PrivateEndpointService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PrivateEndpointService) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PrivateEndpointService) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PrivateEndpointService) GetDeletedAt() *types.Timestamp {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func (m *PrivateEndpointService) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *PrivateEndpointService) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

func (m *PrivateEndpointService) GetAlternateDnsNames() []string {
	if m != nil {
		return m.AlternateDnsNames
	}
	return nil
}

func (m *PrivateEndpointService) GetAks() *PrivateEndpointService_Aks {
	if m != nil {
		return m.Aks
	}
	return nil
}

func (m *PrivateEndpointService) GetStatus() *PrivateEndpointService_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

// Specific AKS setting.
type PrivateEndpointService_Aks struct {
	// The subscription IDs of the client side, needed to auto-approve private endpoint connections.
	// After a private endpoint connection has been made this field cannot be modified anymore.
	ClientSubscriptionIds []string `protobuf:"bytes,1,rep,name=client_subscription_ids,json=clientSubscriptionIds,proto3" json:"client_subscription_ids,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *PrivateEndpointService_Aks) Reset()         { *m = PrivateEndpointService_Aks{} }
func (m *PrivateEndpointService_Aks) String() string { return proto.CompactTextString(m) }
func (*PrivateEndpointService_Aks) ProtoMessage()    {}
func (*PrivateEndpointService_Aks) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{2, 0}
}
func (m *PrivateEndpointService_Aks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateEndpointService_Aks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateEndpointService_Aks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateEndpointService_Aks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateEndpointService_Aks.Merge(m, src)
}
func (m *PrivateEndpointService_Aks) XXX_Size() int {
	return m.Size()
}
func (m *PrivateEndpointService_Aks) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateEndpointService_Aks.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateEndpointService_Aks proto.InternalMessageInfo

func (m *PrivateEndpointService_Aks) GetClientSubscriptionIds() []string {
	if m != nil {
		return m.ClientSubscriptionIds
	}
	return nil
}

// Specific AKS private endpoint connection status fields.
type PrivateEndpointService_AksPrivateEndpointConnectionStatus struct {
	// The name of the private endpoint connection
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the private endpoint connection
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The state of the private endpoint connection
	State string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// The private endpoint identifier
	Id                   string   `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) Reset() {
	*m = PrivateEndpointService_AksPrivateEndpointConnectionStatus{}
}
func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) String() string {
	return proto.CompactTextString(m)
}
func (*PrivateEndpointService_AksPrivateEndpointConnectionStatus) ProtoMessage() {}
func (*PrivateEndpointService_AksPrivateEndpointConnectionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{2, 1}
}
func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateEndpointService_AksPrivateEndpointConnectionStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateEndpointService_AksPrivateEndpointConnectionStatus.Merge(m, src)
}
func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) XXX_Size() int {
	return m.Size()
}
func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateEndpointService_AksPrivateEndpointConnectionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateEndpointService_AksPrivateEndpointConnectionStatus proto.InternalMessageInfo

func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Specific AKS status fields.
// All fields are read-only.
type PrivateEndpointService_AksStatus struct {
	// The alias generated by the Azure private link service needed by the client to setup the private endpoint.
	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	// The status of the private endpoint connections.
	PrivateEndpointConnections []*PrivateEndpointService_AksPrivateEndpointConnectionStatus `protobuf:"bytes,2,rep,name=private_endpoint_connections,json=privateEndpointConnections,proto3" json:"private_endpoint_connections,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                                                     `json:"-"`
	XXX_unrecognized           []byte                                                       `json:"-"`
	XXX_sizecache              int32                                                        `json:"-"`
}

func (m *PrivateEndpointService_AksStatus) Reset()         { *m = PrivateEndpointService_AksStatus{} }
func (m *PrivateEndpointService_AksStatus) String() string { return proto.CompactTextString(m) }
func (*PrivateEndpointService_AksStatus) ProtoMessage()    {}
func (*PrivateEndpointService_AksStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{2, 2}
}
func (m *PrivateEndpointService_AksStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateEndpointService_AksStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateEndpointService_AksStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateEndpointService_AksStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateEndpointService_AksStatus.Merge(m, src)
}
func (m *PrivateEndpointService_AksStatus) XXX_Size() int {
	return m.Size()
}
func (m *PrivateEndpointService_AksStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateEndpointService_AksStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateEndpointService_AksStatus proto.InternalMessageInfo

func (m *PrivateEndpointService_AksStatus) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *PrivateEndpointService_AksStatus) GetPrivateEndpointConnections() []*PrivateEndpointService_AksPrivateEndpointConnectionStatus {
	if m != nil {
		return m.PrivateEndpointConnections
	}
	return nil
}

// Status of the private endpoint service.
// All fields are read-only.
type PrivateEndpointService_Status struct {
	// Set when the private endpoint service is ready.
	Ready bool `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
	// The timestamp the ready flag has been set.
	ReadyAt *types.Timestamp `protobuf:"bytes,2,opt,name=ready_at,json=readyAt,proto3" json:"ready_at,omitempty"`
	// Set if this private endpoint service needs attention.
	NeedsAttention bool `protobuf:"varint,10,opt,name=needs_attention,json=needsAttention,proto3" json:"needs_attention,omitempty"`
	// Free text message describing the status.
	Message string `protobuf:"bytes,11,opt,name=message,proto3" json:"message,omitempty"`
	// Specific AKS status fields.
	// All fields are read-only.
	Aks                  *PrivateEndpointService_AksStatus `protobuf:"bytes,20,opt,name=aks,proto3" json:"aks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *PrivateEndpointService_Status) Reset()         { *m = PrivateEndpointService_Status{} }
func (m *PrivateEndpointService_Status) String() string { return proto.CompactTextString(m) }
func (*PrivateEndpointService_Status) ProtoMessage()    {}
func (*PrivateEndpointService_Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{2, 3}
}
func (m *PrivateEndpointService_Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateEndpointService_Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateEndpointService_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateEndpointService_Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateEndpointService_Status.Merge(m, src)
}
func (m *PrivateEndpointService_Status) XXX_Size() int {
	return m.Size()
}
func (m *PrivateEndpointService_Status) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateEndpointService_Status.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateEndpointService_Status proto.InternalMessageInfo

func (m *PrivateEndpointService_Status) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

func (m *PrivateEndpointService_Status) GetReadyAt() *types.Timestamp {
	if m != nil {
		return m.ReadyAt
	}
	return nil
}

func (m *PrivateEndpointService_Status) GetNeedsAttention() bool {
	if m != nil {
		return m.NeedsAttention
	}
	return false
}

func (m *PrivateEndpointService_Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PrivateEndpointService_Status) GetAks() *PrivateEndpointService_AksStatus {
	if m != nil {
		return m.Aks
	}
	return nil
}

func init() {
	proto.RegisterType((*IsPrivateEndpointServiceFeatureAvailableRequest)(nil), "arangodb.cloud.network.v1.IsPrivateEndpointServiceFeatureAvailableRequest")
	proto.RegisterType((*IsPrivateEndpointServiceFeatureAvailableResult)(nil), "arangodb.cloud.network.v1.IsPrivateEndpointServiceFeatureAvailableResult")
	proto.RegisterType((*PrivateEndpointService)(nil), "arangodb.cloud.network.v1.PrivateEndpointService")
	proto.RegisterType((*PrivateEndpointService_Aks)(nil), "arangodb.cloud.network.v1.PrivateEndpointService.Aks")
	proto.RegisterType((*PrivateEndpointService_AksPrivateEndpointConnectionStatus)(nil), "arangodb.cloud.network.v1.PrivateEndpointService.AksPrivateEndpointConnectionStatus")
	proto.RegisterType((*PrivateEndpointService_AksStatus)(nil), "arangodb.cloud.network.v1.PrivateEndpointService.AksStatus")
	proto.RegisterType((*PrivateEndpointService_Status)(nil), "arangodb.cloud.network.v1.PrivateEndpointService.Status")
}

func init() { proto.RegisterFile("network.proto", fileDescriptor_8571034d60397816) }

var fileDescriptor_8571034d60397816 = []byte{
	// 939 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0x66, 0xec, 0xfc, 0xf9, 0x98, 0x04, 0x18, 0x42, 0xd9, 0x2e, 0x6e, 0x30, 0xce, 0x45, 0xad,
	0x56, 0xd9, 0x25, 0x2e, 0x8d, 0x4a, 0xaa, 0x22, 0x6d, 0xeb, 0x36, 0x32, 0x82, 0x12, 0x39, 0xa5,
	0x17, 0xdc, 0x58, 0x63, 0xcf, 0xd4, 0x1d, 0x79, 0x77, 0x76, 0xd9, 0x99, 0x35, 0x58, 0x55, 0x25,
	0xc4, 0x2b, 0x20, 0x21, 0x1e, 0x01, 0xf1, 0x08, 0xdc, 0x71, 0xc7, 0x25, 0x82, 0x7b, 0x84, 0x02,
	0x12, 0x0f, 0x81, 0x90, 0xd0, 0xce, 0xce, 0xda, 0x6e, 0x12, 0x37, 0x75, 0x14, 0xee, 0x66, 0xce,
	0x99, 0xf9, 0xce, 0x77, 0xce, 0x7c, 0xfb, 0xd9, 0xb0, 0x2a, 0x98, 0xfa, 0x22, 0x8c, 0x07, 0x4e,
	0x14, 0x87, 0x2a, 0xc4, 0x17, 0x49, 0x4c, 0x44, 0x3f, 0xa4, 0x5d, 0xa7, 0xe7, 0x87, 0x09, 0x75,
	0xf2, 0xec, 0x70, 0xdb, 0xbe, 0xd0, 0x0b, 0x83, 0x20, 0x14, 0xee, 0x70, 0xdb, 0xcd, 0x56, 0xd9,
	0x15, 0xfb, 0x66, 0x9f, 0xab, 0xc7, 0x49, 0xd7, 0xe9, 0x85, 0x81, 0xdb, 0x0f, 0x7d, 0x22, 0xfa,
	0xae, 0x4e, 0x74, 0x93, 0x47, 0x6e, 0xa4, 0x46, 0x11, 0x93, 0xae, 0xe2, 0x01, 0x93, 0x8a, 0x04,
	0xd1, 0x64, 0x65, 0x2e, 0x57, 0xfa, 0x61, 0xd8, 0xf7, 0x99, 0x4b, 0x22, 0xee, 0x12, 0x21, 0x42,
	0x45, 0x14, 0x0f, 0x85, 0xcc, 0xb2, 0xb5, 0x87, 0xe0, 0xb6, 0xe4, 0x7e, 0xcc, 0x87, 0x44, 0xb1,
	0xbb, 0x82, 0x46, 0x21, 0x17, 0xea, 0x80, 0xc5, 0x43, 0xde, 0x63, 0xf7, 0x18, 0x51, 0x49, 0xcc,
	0xbc, 0x21, 0xe1, 0x3e, 0xe9, 0xfa, 0xac, 0xcd, 0x3e, 0x4f, 0x98, 0x54, 0x78, 0x13, 0x56, 0x29,
	0x8b, 0xfc, 0x70, 0x14, 0x30, 0xa1, 0x3a, 0x9c, 0x5a, 0xa8, 0x8a, 0xea, 0xa5, 0xf6, 0xcb, 0x93,
	0x60, 0x8b, 0xd6, 0x1e, 0x83, 0xf3, 0xe2, 0xb8, 0x32, 0xf1, 0x15, 0xae, 0x40, 0x89, 0xe4, 0x21,
	0x0d, 0xb9, 0xd2, 0x9e, 0x04, 0xb0, 0x05, 0xcb, 0x01, 0x93, 0x92, 0xf4, 0x99, 0x55, 0xd0, 0xe5,
	0xf2, 0x6d, 0xed, 0xf7, 0x15, 0xb8, 0x70, 0x72, 0x21, 0xbc, 0x06, 0x85, 0x31, 0xbd, 0x02, 0xa7,
	0xf8, 0x55, 0x28, 0x26, 0xb1, 0x6f, 0x00, 0xd2, 0x25, 0xc6, 0xb0, 0x20, 0x48, 0xc0, 0xac, 0xa2,
	0x0e, 0xe9, 0x35, 0xae, 0x42, 0x99, 0x32, 0xd9, 0x8b, 0x79, 0x94, 0x0e, 0xca, 0x5a, 0xd0, 0xa9,
	0xe9, 0x10, 0x7e, 0x1f, 0xa0, 0x17, 0x33, 0xa2, 0x18, 0xed, 0x10, 0x65, 0x2d, 0x56, 0x51, 0xbd,
	0xdc, 0xb0, 0x9d, 0x6c, 0xce, 0x4e, 0xfe, 0x32, 0xce, 0x83, 0xfc, 0x21, 0xda, 0x25, 0x73, 0xda,
	0x53, 0xe9, 0x55, 0xca, 0x7c, 0x66, 0xae, 0x2e, 0x9d, 0x7e, 0xd5, 0x9c, 0xf6, 0x14, 0xbe, 0x04,
	0xc0, 0x65, 0xc7, 0xec, 0xad, 0xe5, 0x6c, 0x42, 0x5c, 0x36, 0xb3, 0xc0, 0xf1, 0x67, 0x81, 0xe3,
	0xcf, 0x82, 0x1d, 0x78, 0x9d, 0xf8, 0x8a, 0xc5, 0x82, 0x28, 0xd6, 0xa1, 0x42, 0x76, 0xd2, 0x8e,
	0xa5, 0x55, 0xae, 0x16, 0xeb, 0xa5, 0xf6, 0x6b, 0xe3, 0x54, 0x53, 0xc8, 0xfb, 0x69, 0x02, 0xef,
	0x41, 0x91, 0x0c, 0xa4, 0xb5, 0xae, 0x79, 0x5e, 0x77, 0x66, 0x4a, 0xd7, 0x39, 0xf9, 0x05, 0x1c,
	0x6f, 0x20, 0xdb, 0x29, 0x02, 0xde, 0x87, 0x25, 0xa9, 0x88, 0x4a, 0xa4, 0x45, 0x35, 0xd6, 0x8d,
	0xf9, 0xb1, 0x0e, 0xf4, 0xfd, 0xb6, 0xc1, 0xb1, 0x6f, 0x41, 0xd1, 0x1b, 0x48, 0xbc, 0x03, 0x6f,
	0xf6, 0x7c, 0x9e, 0xb6, 0x2c, 0x93, 0xee, 0xf8, 0x89, 0x3a, 0x9c, 0x4a, 0x0b, 0xe9, 0xae, 0xde,
	0xc8, 0xd2, 0x07, 0x53, 0xd9, 0x16, 0x95, 0xf6, 0x57, 0x08, 0x6a, 0xde, 0xe0, 0xa8, 0x44, 0xef,
	0x84, 0x42, 0xb0, 0x5e, 0x7a, 0x26, 0xab, 0x36, 0x16, 0x08, 0x9a, 0x2d, 0x90, 0xc2, 0x71, 0x81,
	0xac, 0xc3, 0x62, 0xca, 0x32, 0xd7, 0x55, 0xb6, 0x31, 0x72, 0x5c, 0xc8, 0xe5, 0x68, 0xff, 0x88,
	0xa0, 0xe4, 0x0d, 0xa4, 0xa9, 0xb4, 0x0e, 0x8b, 0xc4, 0xe7, 0x44, 0x9a, 0x52, 0xd9, 0x06, 0x7f,
	0x8b, 0xa0, 0x12, 0x65, 0x1c, 0x3b, 0xcc, 0x90, 0xec, 0xf4, 0xc6, 0x2c, 0xa5, 0x55, 0xa8, 0x16,
	0xeb, 0xe5, 0xc6, 0x83, 0x33, 0x3d, 0xcd, 0x29, 0xcd, 0xb7, 0xed, 0x68, 0xd6, 0x01, 0x69, 0xff,
	0x8d, 0x60, 0x69, 0xc2, 0x3c, 0x66, 0x84, 0x8e, 0xcc, 0x57, 0x9b, 0x6d, 0xf0, 0x75, 0x58, 0xd1,
	0x8b, 0x54, 0xe7, 0x85, 0x53, 0x75, 0xbe, 0xac, 0xcf, 0x7a, 0x0a, 0x5f, 0x86, 0x57, 0x04, 0x63,
	0x54, 0x76, 0x88, 0x52, 0x4c, 0xe8, 0x01, 0x83, 0x86, 0x5d, 0xd3, 0x61, 0x2f, 0x8f, 0x4e, 0x3b,
	0x42, 0xf9, 0x19, 0x47, 0xc0, 0x1f, 0x4f, 0x8b, 0xf6, 0xe6, 0x99, 0x26, 0x63, 0x06, 0x90, 0xe2,
	0x34, 0xfe, 0x59, 0x81, 0xb5, 0xfb, 0xd9, 0xa5, 0xdc, 0x58, 0xbe, 0x84, 0xd5, 0x3d, 0xa6, 0xbc,
	0xfd, 0xd6, 0x43, 0x16, 0xcb, 0x94, 0xcc, 0xdb, 0x47, 0xab, 0x18, 0xff, 0x1e, 0x6e, 0x3b, 0x77,
	0x83, 0x48, 0x8d, 0xec, 0x77, 0x66, 0x1f, 0x30, 0x18, 0xb5, 0xcd, 0xaf, 0x7f, 0xfb, 0xeb, 0x9b,
	0xc2, 0x25, 0xfc, 0x96, 0xb6, 0x6a, 0x43, 0x33, 0xfd, 0x2d, 0x20, 0x11, 0xdf, 0x1a, 0x9a, 0x42,
	0xff, 0x22, 0xa8, 0xbf, 0xa8, 0xb1, 0xe2, 0x0f, 0x9f, 0xd3, 0xfb, 0x9c, 0xae, 0x6f, 0xb7, 0xce,
	0x05, 0x2b, 0x75, 0xfa, 0xda, 0xae, 0x6e, 0xf4, 0x3d, 0xdc, 0x38, 0xda, 0xe8, 0xc4, 0xaa, 0xdc,
	0x27, 0xcf, 0x78, 0xd9, 0x53, 0xf7, 0x51, 0x06, 0x85, 0xbf, 0x47, 0x70, 0x71, 0x8f, 0xa9, 0x19,
	0x86, 0xbf, 0x39, 0x7b, 0xca, 0xad, 0xe6, 0x27, 0x51, 0xa6, 0xdc, 0xed, 0xb9, 0x15, 0x51, 0xbb,
	0xa6, 0x19, 0x6f, 0xe1, 0xab, 0x47, 0x19, 0x9b, 0x0f, 0x24, 0xff, 0x32, 0x65, 0x76, 0xde, 0x7d,
	0xc2, 0xe9, 0x53, 0xfc, 0x13, 0x82, 0xcb, 0x33, 0xa9, 0xde, 0x1e, 0x35, 0x27, 0xbe, 0xdc, 0xfc,
	0xdf, 0x88, 0x7f, 0xa0, 0x89, 0xdf, 0xc0, 0x3b, 0xcf, 0x1b, 0x75, 0x3a, 0xdf, 0x93, 0x1b, 0xc1,
	0xbf, 0x22, 0xa8, 0xdc, 0xd1, 0x3f, 0x5e, 0x33, 0x26, 0x3e, 0x3f, 0xa7, 0xb3, 0xb4, 0xf1, 0x91,
	0x6e, 0xe3, 0x5e, 0xcd, 0x9b, 0x43, 0x31, 0x27, 0x77, 0xb4, 0x8b, 0xae, 0xe0, 0x1f, 0x10, 0x54,
	0x3e, 0x8d, 0xe8, 0xb9, 0x36, 0x75, 0x9a, 0x01, 0xd4, 0x76, 0x74, 0x0b, 0xef, 0x36, 0xe6, 0x91,
	0xd0, 0x2e, 0xba, 0x72, 0xfb, 0xd6, 0xcf, 0x87, 0x1b, 0xe8, 0x97, 0xc3, 0x0d, 0xf4, 0xc7, 0xe1,
	0x06, 0xfa, 0xee, 0xcf, 0x8d, 0x97, 0x3e, 0xbb, 0x3a, 0xf5, 0x6f, 0x30, 0x2f, 0xba, 0x15, 0x10,
	0x41, 0xfa, 0x8c, 0xa6, 0xe0, 0x72, 0x0a, 0xbd, 0xbb, 0xa4, 0xbd, 0xf6, 0xda, 0x7f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xbc, 0x4f, 0xa2, 0x77, 0x85, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetworkServiceClient is the client API for NetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkServiceClient interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error)
	// Checks if the private endpoint service feature is enabled and available for a specific deployment.
	// Required permissions:
	// - network.privateendpointservice.get-feature on the deployment that is identified by the given ID.
	IsPrivateEndpointServiceFeatureAvailable(ctx context.Context, in *IsPrivateEndpointServiceFeatureAvailableRequest, opts ...grpc.CallOption) (*IsPrivateEndpointServiceFeatureAvailableResult, error)
	// Fetch a private endpoint service by its ID.
	// Required permissions:
	// - network.privateendpointservice.get on the private endpoint service.
	GetPrivateEndpointService(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PrivateEndpointService, error)
	// Fetch a private endpoint service by the deployment ID.
	// Required permissions:
	// - network.privateendpointservice.get-by-deployment-id on the deployment that owns the private endpoint service.
	GetPrivateEndpointServiceByDeploymentID(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PrivateEndpointService, error)
	// Create a new private endpoint service.
	// Required permissions:
	// - network.privateendpointservice.create on the deployment that owns the private endpoint service.
	CreatePrivateEndpointService(ctx context.Context, in *PrivateEndpointService, opts ...grpc.CallOption) (*PrivateEndpointService, error)
	// Update the private endpoint service.
	// Required permissions:
	// - network.privateendpointservice.update on the private endpoint service.
	UpdatePrivateEndpointService(ctx context.Context, in *PrivateEndpointService, opts ...grpc.CallOption) (*v1.Empty, error)
}

type networkServiceClient struct {
	cc *grpc.ClientConn
}

func NewNetworkServiceClient(cc *grpc.ClientConn) NetworkServiceClient {
	return &networkServiceClient{cc}
}

func (c *networkServiceClient) GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error) {
	out := new(v1.Version)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.network.v1.NetworkService/GetAPIVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) IsPrivateEndpointServiceFeatureAvailable(ctx context.Context, in *IsPrivateEndpointServiceFeatureAvailableRequest, opts ...grpc.CallOption) (*IsPrivateEndpointServiceFeatureAvailableResult, error) {
	out := new(IsPrivateEndpointServiceFeatureAvailableResult)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.network.v1.NetworkService/IsPrivateEndpointServiceFeatureAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetPrivateEndpointService(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PrivateEndpointService, error) {
	out := new(PrivateEndpointService)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.network.v1.NetworkService/GetPrivateEndpointService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetPrivateEndpointServiceByDeploymentID(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PrivateEndpointService, error) {
	out := new(PrivateEndpointService)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.network.v1.NetworkService/GetPrivateEndpointServiceByDeploymentID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) CreatePrivateEndpointService(ctx context.Context, in *PrivateEndpointService, opts ...grpc.CallOption) (*PrivateEndpointService, error) {
	out := new(PrivateEndpointService)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.network.v1.NetworkService/CreatePrivateEndpointService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) UpdatePrivateEndpointService(ctx context.Context, in *PrivateEndpointService, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.network.v1.NetworkService/UpdatePrivateEndpointService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServiceServer is the server API for NetworkService service.
type NetworkServiceServer interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error)
	// Checks if the private endpoint service feature is enabled and available for a specific deployment.
	// Required permissions:
	// - network.privateendpointservice.get-feature on the deployment that is identified by the given ID.
	IsPrivateEndpointServiceFeatureAvailable(context.Context, *IsPrivateEndpointServiceFeatureAvailableRequest) (*IsPrivateEndpointServiceFeatureAvailableResult, error)
	// Fetch a private endpoint service by its ID.
	// Required permissions:
	// - network.privateendpointservice.get on the private endpoint service.
	GetPrivateEndpointService(context.Context, *v1.IDOptions) (*PrivateEndpointService, error)
	// Fetch a private endpoint service by the deployment ID.
	// Required permissions:
	// - network.privateendpointservice.get-by-deployment-id on the deployment that owns the private endpoint service.
	GetPrivateEndpointServiceByDeploymentID(context.Context, *v1.IDOptions) (*PrivateEndpointService, error)
	// Create a new private endpoint service.
	// Required permissions:
	// - network.privateendpointservice.create on the deployment that owns the private endpoint service.
	CreatePrivateEndpointService(context.Context, *PrivateEndpointService) (*PrivateEndpointService, error)
	// Update the private endpoint service.
	// Required permissions:
	// - network.privateendpointservice.update on the private endpoint service.
	UpdatePrivateEndpointService(context.Context, *PrivateEndpointService) (*v1.Empty, error)
}

// UnimplementedNetworkServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkServiceServer struct {
}

func (*UnimplementedNetworkServiceServer) GetAPIVersion(ctx context.Context, req *v1.Empty) (*v1.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIVersion not implemented")
}
func (*UnimplementedNetworkServiceServer) IsPrivateEndpointServiceFeatureAvailable(ctx context.Context, req *IsPrivateEndpointServiceFeatureAvailableRequest) (*IsPrivateEndpointServiceFeatureAvailableResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPrivateEndpointServiceFeatureAvailable not implemented")
}
func (*UnimplementedNetworkServiceServer) GetPrivateEndpointService(ctx context.Context, req *v1.IDOptions) (*PrivateEndpointService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateEndpointService not implemented")
}
func (*UnimplementedNetworkServiceServer) GetPrivateEndpointServiceByDeploymentID(ctx context.Context, req *v1.IDOptions) (*PrivateEndpointService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateEndpointServiceByDeploymentID not implemented")
}
func (*UnimplementedNetworkServiceServer) CreatePrivateEndpointService(ctx context.Context, req *PrivateEndpointService) (*PrivateEndpointService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrivateEndpointService not implemented")
}
func (*UnimplementedNetworkServiceServer) UpdatePrivateEndpointService(ctx context.Context, req *PrivateEndpointService) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrivateEndpointService not implemented")
}

func RegisterNetworkServiceServer(s *grpc.Server, srv NetworkServiceServer) {
	s.RegisterService(&_NetworkService_serviceDesc, srv)
}

func _NetworkService_GetAPIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetAPIVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.network.v1.NetworkService/GetAPIVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetAPIVersion(ctx, req.(*v1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_IsPrivateEndpointServiceFeatureAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsPrivateEndpointServiceFeatureAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).IsPrivateEndpointServiceFeatureAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.network.v1.NetworkService/IsPrivateEndpointServiceFeatureAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).IsPrivateEndpointServiceFeatureAvailable(ctx, req.(*IsPrivateEndpointServiceFeatureAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetPrivateEndpointService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetPrivateEndpointService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.network.v1.NetworkService/GetPrivateEndpointService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetPrivateEndpointService(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetPrivateEndpointServiceByDeploymentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetPrivateEndpointServiceByDeploymentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.network.v1.NetworkService/GetPrivateEndpointServiceByDeploymentID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetPrivateEndpointServiceByDeploymentID(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_CreatePrivateEndpointService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateEndpointService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).CreatePrivateEndpointService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.network.v1.NetworkService/CreatePrivateEndpointService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).CreatePrivateEndpointService(ctx, req.(*PrivateEndpointService))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_UpdatePrivateEndpointService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateEndpointService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).UpdatePrivateEndpointService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.network.v1.NetworkService/UpdatePrivateEndpointService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).UpdatePrivateEndpointService(ctx, req.(*PrivateEndpointService))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arangodb.cloud.network.v1.NetworkService",
	HandlerType: (*NetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIVersion",
			Handler:    _NetworkService_GetAPIVersion_Handler,
		},
		{
			MethodName: "IsPrivateEndpointServiceFeatureAvailable",
			Handler:    _NetworkService_IsPrivateEndpointServiceFeatureAvailable_Handler,
		},
		{
			MethodName: "GetPrivateEndpointService",
			Handler:    _NetworkService_GetPrivateEndpointService_Handler,
		},
		{
			MethodName: "GetPrivateEndpointServiceByDeploymentID",
			Handler:    _NetworkService_GetPrivateEndpointServiceByDeploymentID_Handler,
		},
		{
			MethodName: "CreatePrivateEndpointService",
			Handler:    _NetworkService_CreatePrivateEndpointService_Handler,
		},
		{
			MethodName: "UpdatePrivateEndpointService",
			Handler:    _NetworkService_UpdatePrivateEndpointService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network.proto",
}

func (m *IsPrivateEndpointServiceFeatureAvailableRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsPrivateEndpointServiceFeatureAvailableRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsPrivateEndpointServiceFeatureAvailableRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeploymentId) > 0 {
		i -= len(m.DeploymentId)
		copy(dAtA[i:], m.DeploymentId)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.DeploymentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsPrivateEndpointServiceFeatureAvailableResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsPrivateEndpointServiceFeatureAvailableResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsPrivateEndpointServiceFeatureAvailableResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Available {
		i--
		if m.Available {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PrivateEndpointService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateEndpointService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateEndpointService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.Aks != nil {
		{
			size, err := m.Aks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.AlternateDnsNames) > 0 {
		for iNdEx := len(m.AlternateDnsNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AlternateDnsNames[iNdEx])
			copy(dAtA[i:], m.AlternateDnsNames[iNdEx])
			i = encodeVarintNetwork(dAtA, i, uint64(len(m.AlternateDnsNames[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.DeploymentId) > 0 {
		i -= len(m.DeploymentId)
		copy(dAtA[i:], m.DeploymentId)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.DeploymentId)))
		i--
		dAtA[i] = 0x52
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.DeletedAt != nil {
		{
			size, err := m.DeletedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateEndpointService_Aks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateEndpointService_Aks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateEndpointService_Aks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClientSubscriptionIds) > 0 {
		for iNdEx := len(m.ClientSubscriptionIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClientSubscriptionIds[iNdEx])
			copy(dAtA[i:], m.ClientSubscriptionIds[iNdEx])
			i = encodeVarintNetwork(dAtA, i, uint64(len(m.ClientSubscriptionIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateEndpointService_AksStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateEndpointService_AksStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateEndpointService_AksStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PrivateEndpointConnections) > 0 {
		for iNdEx := len(m.PrivateEndpointConnections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PrivateEndpointConnections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNetwork(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateEndpointService_Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateEndpointService_Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateEndpointService_Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aks != nil {
		{
			size, err := m.Aks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x5a
	}
	if m.NeedsAttention {
		i--
		if m.NeedsAttention {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.ReadyAt != nil {
		{
			size, err := m.ReadyAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Ready {
		i--
		if m.Ready {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNetwork(dAtA []byte, offset int, v uint64) int {
	offset -= sovNetwork(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IsPrivateEndpointServiceFeatureAvailableRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeploymentId)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsPrivateEndpointServiceFeatureAvailableResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Available {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateEndpointService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.DeletedAt != nil {
		l = m.DeletedAt.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.IsDeleted {
		n += 2
	}
	l = len(m.DeploymentId)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if len(m.AlternateDnsNames) > 0 {
		for _, s := range m.AlternateDnsNames {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if m.Aks != nil {
		l = m.Aks.Size()
		n += 2 + l + sovNetwork(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 2 + l + sovNetwork(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateEndpointService_Aks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClientSubscriptionIds) > 0 {
		for _, s := range m.ClientSubscriptionIds {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateEndpointService_AksStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if len(m.PrivateEndpointConnections) > 0 {
		for _, e := range m.PrivateEndpointConnections {
			l = e.Size()
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateEndpointService_Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ready {
		n += 2
	}
	if m.ReadyAt != nil {
		l = m.ReadyAt.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.NeedsAttention {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.Aks != nil {
		l = m.Aks.Size()
		n += 2 + l + sovNetwork(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNetwork(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNetwork(x uint64) (n int) {
	return sovNetwork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IsPrivateEndpointServiceFeatureAvailableRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsPrivateEndpointServiceFeatureAvailableRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsPrivateEndpointServiceFeatureAvailableRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsPrivateEndpointServiceFeatureAvailableResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsPrivateEndpointServiceFeatureAvailableResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsPrivateEndpointServiceFeatureAvailableResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Available = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateEndpointService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateEndpointService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateEndpointService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = &types.Timestamp{}
			}
			if err := m.DeletedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlternateDnsNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlternateDnsNames = append(m.AlternateDnsNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Aks == nil {
				m.Aks = &PrivateEndpointService_Aks{}
			}
			if err := m.Aks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &PrivateEndpointService_Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateEndpointService_Aks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Aks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Aks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSubscriptionIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSubscriptionIds = append(m.ClientSubscriptionIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AksPrivateEndpointConnectionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AksPrivateEndpointConnectionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateEndpointService_AksStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AksStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AksStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateEndpointConnections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateEndpointConnections = append(m.PrivateEndpointConnections, &PrivateEndpointService_AksPrivateEndpointConnectionStatus{})
			if err := m.PrivateEndpointConnections[len(m.PrivateEndpointConnections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateEndpointService_Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ready = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReadyAt == nil {
				m.ReadyAt = &types.Timestamp{}
			}
			if err := m.ReadyAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedsAttention", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedsAttention = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Aks == nil {
				m.Aks = &PrivateEndpointService_AksStatus{}
			}
			if err := m.Aks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetwork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNetwork
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthNetwork
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNetwork
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNetwork(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthNetwork
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNetwork = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetwork   = fmt.Errorf("proto: integer overflow")
)
