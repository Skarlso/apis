// 
// DISCLAIMER
// 
// Copyright 2019 ArangoDB Inc, Cologne, Germany
// 
// Author Ewout Prangsma
// 

syntax = "proto3";

package arangodb.cloud.resourcemanager.v1;

option go_package = "github.com/arangodb-managed/apis/resourcemanager/v1";

import "common/v1/common.proto";

import "github.com/golang/protobuf/ptypes/timestamp/timestamp.proto";
import "google/api/annotations.proto";

// ResourceManagerService is the API used to configure basic resource objects.
service ResourceManagerService {
    // Fetch all organizations that the authenticated user is a member of.
    // Required permissions:
    // - None
    rpc ListOrganizations(common.v1.ListOptions) returns (OrganizationList) {
        option (google.api.http) = {
            get: "/api/resourcemanager/v1/self/organizations"
        };
    }

    // Fetch an organization by its id.
    // The authenticated user must be a member of the organization.
    // Required permissions:
    // - None
    rpc GetOrganization(common.v1.IDOptions) returns (Organization) {
        option (google.api.http) = {
            get: "/api/resourcemanager/v1/organizations/{id}"
        };
    }

    // Create a new organization
    // Required permissions:
    // - None
    rpc CreateOrganization(Organization) returns (Organization) {
        option (google.api.http) = {
            post: "/api/resourcemanager/v1/organizations"
            body: "*"
        };
    }

    // Update an organization
    // Required permissions:
    // - resourcemanager.organization.update on the organization
    rpc UpdateOrganization(Organization) returns (Organization) {
        option (google.api.http) = {
            patch: "/api/resourcemanager/v1/organizations/{id}"
            body: "*"
        };
    }

    // Delete an organization
    // Note that organization are never really removed.
    // Instead their is_deleted field is set to true.
    // Required permissions:
    // - resourcemanager.organization.delete on the organization
    rpc DeleteOrganization(Organization) returns (common.v1.Empty) {
        option (google.api.http) = {
            delete: "/api/resourcemanager/v1/organizations/{id}"
        };
    }

    // Get a list of members of the organization identified by the given context ID.
    // Required permissions:
    // - resourcemanager.organization.get on the organization
    rpc ListOrganizationMembers(common.v1.ListOptions) returns (MemberList) {
        option (google.api.http) = {
            get: "/api/resourcemanager/v1/organizations/{context_id}/members"
        };
    }

    // Add one or more members to an organization.
    // Required permissions:
    // - resourcemanager.organization.update on the organization
    rpc AddOrganizationMembers(OrganizationMembersRequest) returns (common.v1.Empty) {
        option (google.api.http) = {
            post: "/api/resourcemanager/v1/organizations/{organization_id}/members"
            body: "*"
        };
    }

    // Remove one or more members from an organization.
    // Required permissions:
    // - resourcemanager.organization.update on the organization
    rpc DeleteOrganizationMembers(OrganizationMembersRequest) returns (common.v1.Empty) {
        option (google.api.http) = {
            delete: "/api/resourcemanager/v1/organizations/{organization_id}/members"
            body: "*"
        };
    }

    // Is the user identified by the given user ID a member
    // of the organization identified by the given organization ID.
    // Required permissions:
    // - resourcemanager.organization.get on the organization, unless the requested user is identical to the authenticated user.
    // Note that if the identified user or organization does not exist, no is returned.
    rpc IsMemberOfOrganization(IsMemberOfOrganizationRequest) returns (common.v1.YesOrNo) {
        option (google.api.http) = {
            get: "/api/resourcemanager/v1/organizations/{organization_id}/members/{user_id}"
        };
    }

    // Fetch all projects in the organization identified by the given context ID.
    // The authenticated user must be a member of the organization identifier by the given context ID.
    // Required permissions:
    // - resourcemanager.project.list on the organization identified by the given context ID
    rpc ListProjects(common.v1.ListOptions) returns (ProjectList) {
        option (google.api.http) = {
            get: "/api/resourcemanager/v1/organizations/{context_id}/projects"
        };
    }

    // Fetch a project by its id.
    // The authenticated user must be a member of the organization that owns the project.
    // Required permissions:
    // - resourcemanager.project.get on the project identified by the given ID
    rpc GetProject(common.v1.IDOptions) returns (Project) {
        option (google.api.http) = {
            get: "/api/resourcemanager/v1/projects/{id}"
        };
    }

    // Create a new project
    // The authenticated user must be a member of the organization that owns the project.
    // Required permissions:
    // - resourcemanager.project.create on the organization that owns the project
    rpc CreateProject(Project) returns (Project) {
        option (google.api.http) = {
            post: "/api/resourcemanager/v1/organizations/{organization_id}/projects"
            body: "*"
        };
    }

    // Update a project
    // The authenticated user must be a member of the organization that owns the project.
    // Required permissions:
    // - resourcemanager.project.update on the project
    rpc UpdateProject(Project) returns (Project) {
        option (google.api.http) = {
            patch: "/api/resourcemanager/v1/projects/{id}"
            body: "*"
        };
    }

    // Delete a project
    // Note that project are initially only marked for deleted.
    // Once all their resources are removed the project itself is deleted
    // and cannot be restored.
    // The authenticated user must be a member of the organization that owns the project.
    // Required permissions:
    // - resourcemanager.project.delete on the project
    rpc DeleteProject(Project) returns (common.v1.Empty) {
        option (google.api.http) = {
            delete: "/api/resourcemanager/v1/projects/{id}"
        };
    }
}

// An Organization is represents a real world organization such as a company.
message Organization {   
    // System identifier of the organization.
    // This is a read-only value.
    string id = 1;
    // URL of this resource
    // This is a read-only value and cannot be initialized.
    string url = 2;
    // Name of the organization
    string name = 3; 
    // Description of the organization
    string description = 4; 
    // Set when this organization is deleted
    bool is_deleted = 5;
    // The creation timestamp of the organization
    google.protobuf.Timestamp created_at = 6;
    // The deletion timestamp of the organization
    google.protobuf.Timestamp deleted_at = 7;
}

// List of organizations.
message OrganizationList {
    repeated Organization items = 1;
}

// Member of an organization.
// A member is always a user.
message Member {
    // Identifier of the user
    string user_id = 1;
    // Set if this user is owner of the organization
    bool owner = 2;
}

// List of Members.
message MemberList {
    repeated Member items = 1;
}

// Request arguments for IsMemberOfOrganization.
message IsMemberOfOrganizationRequest {
    // Identifier of the user
    string user_id = 1;
    // Identifier of the organization
    string organization_id = 2;
}

// Request arguments for Add/DeleteOrganizationMembers.
message OrganizationMembersRequest {
    // Identifier of the organization to add/remove a user from
    string organization_id = 1;
    // Users to add/remove.
    // For every user, an owner flag is provided as well.
    // If you add an existing user, the owner flag or the add request
    // will overwrite the value of the existing owner flag.
    MemberList members = 2;
}

// A Project is represents a unit within an organization such as a department.
message Project {   
    // System identifier of the project.
    // This is a read-only value.
    // It can be set when creating the project.
    string id = 1;
    // URL of this resource
    // This is a read-only value and cannot be initialized.
    string url = 2;
    // Name of the project
    string name = 3; 
    // Description of the project
    string description = 4; 
    // Identifier of the organization that owns this project.
    // This is a read-only value.
    string organization_id = 5;
    // Set when this project is deleted
    bool is_deleted = 6;
    // The creation timestamp of the project
    google.protobuf.Timestamp created_at = 7;
    // The deletion timestamp of the project
    google.protobuf.Timestamp deleted_at = 8;
}

// List of Projects.
message ProjectList {
    repeated Project items = 1;
}
