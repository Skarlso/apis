//
// DISCLAIMER
//
// Copyright 2021 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//
// Author Marcin Swiderski
//

syntax = "proto3";

package arangodb.cloud.prepaid.v1;

option go_package = "github.com/arangodb-managed/apis/prepaid/v1";

import "common/v1/common.proto";
import "data/v1/data.proto";

import "github.com/golang/protobuf/ptypes/timestamp/timestamp.proto";
import "google/api/annotations.proto";

// PrepaidService is the API used to configure prepaid objects.
service PrepaidService {
    // Get the current API version of this service.
    // Required permissions:
    // - None
    rpc GetAPIVersion(common.v1.Empty) returns (common.v1.Version) {
        option (google.api.http) = {
            get: "/api/prepaid/v1/api-version"
        };
    }

    // Fetch all prepaid deployments for organization.
    // Required permissions:
    // - prepaid.prepaiddeployment.list on the organization
    rpc ListPrepaidDeployments(ListPrepaidDeploymentsRequest) returns (PrepaidDeploymentList) {
        option (google.api.http) = {
            get: "/api/prepaid/v1/prepaiddeployments"
        };
    }

    // Fetch a deployment by its id.
    // Required permissions:
    // - prepaid.prepaiddeployment.get on the deployment identified by the given ID
    rpc GetPrepaidDeployment(common.v1.IDOptions) returns (PrepaidDeployment) {
        option (google.api.http) = {
            get: "/api/prepaid/v1/prepaiddeployments/{id}"
        };
    }

    // Creates a new deployment from a prepaid deployment and attached the newly created deployment to the prepaid deployment.
    // Required permissions:
    // - prepaid.prepaiddeployment.create on the project in which the deployment is going to be created
    // - prepaid.prepaiddeployment.get on the deployment identified by the given prepaid_deployment_id
    rpc CreateDeployment(CreateDeploymentRequest) returns (data.v1.Deployment) {
        option (google.api.http) = {
            post: "/api/prepaid/v1/prepaiddeployments/{prepaid_deployment_id}/create"
            body: "*"
        };
    }

    // Update the deployment by prepaid deployment's id
    // Required permissions:
    // - data.deployment.update on the deployment attached to the prepaid deployment
    rpc UpdateDeployment(UpdateDeploymentRequest) returns (data.v1.Deployment) {
        option (google.api.http) = {
            post: "/api/prepaid/v1/prepaiddeployments/{prepaid_deployment_id}/update"
            body: "*"
        };
    }

    // Creates a cloned deployment from a backup and attaches it to the prepaid deployment. This takes the deployment specification from the prepaid deployment, which must match the specification mentioned in the backup.
    // Required permissions:
    // - prepaid.prepaiddeployment.create on the project in which the deployment is going to be created
	// - prepaid.prepaiddeployment.get on the prepaid deployment identified by the given prepaid_deployment_id
    rpc CloneDeploymentFromBackup(CloneFromBackupRequest) returns (data.v1.Deployment) {
        option (google.api.http) = {
            post: "/api/prepaid/v1/prepaiddeployments/{prepaid_deployment_id}/clone"
            body: "*"
        };
    }
}


//  A PrepaidDeployment contains all attributes of a future deployment that is already paid for.
message PrepaidDeployment {
    // System identifier of the prepaid deployment.
    // This is a read-only value.
    string id = 1;
    // URL of this resource
    // This is a read-only value.
    string url = 2;
	// The name of prepaid deployment, not related to created deployment
	string name = 3;
	// An optional description for prepaid deployment, not related to created deployment
	string description = 4;
	// Identifier of an organization that owns this prepaid deployment
	string organization_id = 5;
    // Identifier of the region in which the deployment is going to be created.
    string region_id = 6;
    // The creation timestamp of the prepaid deployment
    google.protobuf.Timestamp created_at = 7;
    // The deletion timestamp of the prepaid deployment
    google.protobuf.Timestamp deleted_at = 8;
    // Set when this deployment is deleted.
    bool is_deleted = 9;
	// When the prepaid deployment was bought
    google.protobuf.Timestamp starts_at = 10;
	// When the prepaid deployment is paid to.
    google.protobuf.Timestamp ends_at = 11;
    // Identifier of the support plan selected for this prepaid deployment.
    string support_plan_id = 12;
    // Servers specification for created deployment
    data.v1.Deployment.ServersSpec servers = 101;
	// Model specification for created deployment
    data.v1.Deployment.ModelSpec model = 102;
	//Identifies the addons that will be used on the deployment
	repeated string addons = 103;

    // Status of the prepaid deployment
    // All members of this field are read-only.
    message Status {
		// id of created deployment
		// if there is no deployment associated with this prepaid deployment it's empty
		string deployment_id = 1;
    }
    Status status = 201;
}

message PrepaidDeploymentList {
	// prepaid deployment items
	repeated PrepaidDeployment items = 1;
}

message ListPrepaidDeploymentsRequest {
	// identifier of the organization to get a list of prepaid deployments for
	string organization_id = 1;
}

message UpdateDeploymentRequest {
	// Identifier of prepaid deployment
	string prepaid_deployment_id = 1;
}

message CloneFromBackupRequest {
	// Identifier of prepaid deployment
	string prepaid_deployment_id = 1;
	// Identifier of the backup to restore from
	// Backup specification has to match prepaid_deployment specification in ordere to succedd
	string backup_id = 2;
}

message CreateDeploymentRequest {
	// Identifier of prepaid deployment to use as a specification and attach the newly created Deployment to
	string prepaid_deployment_id = 1;
    // Identifier of the project that owns the newly created deployment.
	string project_id = 2;
    // Optional identifier of IP allowlist to use for this deployment.
    string ipallowlist_id = 3;
    // ArangoDB version to use for this deployment.
    string version = 4;
    message CertificateSpec {
        // Identifier of the CACertificate used to sign TLS certificates for the deployment.
        // If you change this value after the creation of the deployment a complete
        // rotation of the deployment is required, which will result in some downtime.
        string ca_certificate_id = 1;
        // Zero or more DNS names to include in the TLS certificate of the deployment.
        repeated string alternate_dns_names = 2;
    }
    CertificateSpec certificates = 5;
}
