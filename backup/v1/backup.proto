// 
// DISCLAIMER
// 
// Copyright 2019 ArangoDB Inc, Cologne, Germany
// 
// Author Robert Stam
// 

syntax = "proto3";

package arangodb.cloud.backup.v1;

option go_package = "github.com/arangodb-managed/apis/backup/v1";

import "data/v1/data.proto";
import "common/v1/common.proto";

import "github.com/golang/protobuf/ptypes/timestamp/timestamp.proto";
import "github.com/golang/protobuf/ptypes/duration/duration.proto";
import "google/api/annotations.proto";

// BackupService is the API used to configure backup objects.
service BackupService {

    // Fetch all backup policies for a specific deployment.
    // Required permissions:
    // - backup.backuppolicy.list on the deployment identified by the given context ID.
    rpc ListBackupPolicies(ListBackupPoliciesRequest) returns (BackupPolicyList) {
        option (google.api.http) = {
            get: "/api/backup/v1/deployment/{options.context_id}/backuppolicies"
        };
    }
    
    // Fetch a backup policy by its id.
    // Required permissions:
    // - backup.backuppolicy.get on the backup policy
    rpc GetBackupPolicy(common.v1.IDOptions) returns (BackupPolicy) {
        option (google.api.http) = {
            get: "/api/backup/v1/backuppolicies/{id}"
        };
    }

    // Create a new backup policy
    // Required permissions:
    // -  backup.backuppolicy.create on the deployment that owns the backup policy.
    rpc CreateBackupPolicy(BackupPolicy) returns (BackupPolicy) {
        option (google.api.http) = {
            post: "/api/backup/v1/deployment/{deployment_id}/backuppolicies"
            body: "*"
        };
    }

    // Update a backup policy
    // Required permissions:
    // -  backup.backuppolicy.update on the backup policy
    rpc UpdateBackupPolicy(BackupPolicy) returns (BackupPolicy) {
        option (google.api.http) = {
            patch: "/api/backup/v1/backuppolicies/{id}"
            body: "*"
        };
    }

    // Delete a backup policy.
    // Note that the backup policy are initially only marked for deletion.
    // Once all their dependent backups are removed, the backup policy is removed.
    // Required permissions:
    // -  backup.backuppolicy.delete on the backup policy
    rpc DeleteBackupPolicy(common.v1.IDOptions) returns (common.v1.Empty) {
        option (google.api.http) = {
            delete: "/api/backup/v1/backuppolicies/{id}"
        };
    }
   
    // Fetch all backups for a specific deployment.
    // Required permissions:
    // - backup.backup.list on the deployment identified by the given context ID.
    rpc ListBackups(ListBackupsRequest) returns (BackupList) {
        option (google.api.http) = {
            get: "/api/backup/v1/deployment/{options.context_id}/backups"
        };
    }

    // Fetch a backup by its id.
    // Required permissions:
    // - backup.backup.get on the backup 
    rpc GetBackup(common.v1.IDOptions) returns (Backup) {
        option (google.api.http) = {
            get: "/api/backup/v1/backup/{id}"
        };
    }

    // Create a new manual backup 
    // Setting the backup_policy_id field in the backup is not allowed 
    // Required permissions:
    // -  backup.backup.create on the deployment that owns the backup.
    rpc CreateBackup(Backup) returns (Backup) {
        option (google.api.http) = {
            post: "/api/backup/v1/deployment/{deployment_id}/backup"
            body: "*"
        };
    }

    // Update a backup 
    // Required permissions:
    // -  backup.backup.update on the backup 
    rpc UpdateBackup(Backup) returns (Backup) {
        option (google.api.http) = {
            patch: "/api/backup/v1/backup/{id}"
            body: "*"
        };
    }

    // Download a backup 
    // If this backup was already be downloaded, another download will be done.
    // If the backup is still available on the cluster there is no need to explicitly download the backup before restoring.
    // Required permissions:
    // -  backup.backup.download on the backup 
    rpc DownloadBackup(common.v1.IDOptions) returns (common.v1.Empty) {
        option (google.api.http) = {
            post: "/api/backup/v1/backup/{id}/download"
        };
    }

    // Restore (or recover) a backup 
    // This operation can only be executed on backups where status.available is set
    // Required permissions:
    // -  backup.backup.restore on the backup 
    rpc RestoreBackup(common.v1.IDOptions) returns (common.v1.Empty) {
        option (google.api.http) = {
            post: "/api/backup/v1/backup/{id}/restore"
        };
    }

    // TODO: Add functionality to restore to new deployment

    // Delete a backup
    // Note that the backup are initially only marked for deletion.
    // Once all their dependent backup in the cloud are removed, the backup is removed.
    // Required permissions:
    // -  backup.backup.delete on the backup 
    rpc DeleteBackup(common.v1.IDOptions) returns (common.v1.Empty) {
        option (google.api.http) = {
            delete: "/api/backup/v1/backup/{id}"
        };
    }
}

// BackupPolicy represents a single backup policy for a deployment.
message BackupPolicy {
    // System identifier of the backup policy.
    // This is a read-only value.
    string id = 1;
    // URL of this resource
    // This is a read-only value.
    string url = 2;
    // Name of the backup policy
    string name = 3; 
    // Identifier of the deployment that owns this backup policy.
    // After creation, this value cannot be changed.
    string deployment_id = 4;
    // The creation timestamp of the backup policy
    // This is a read-only value.
    google.protobuf.Timestamp created_at = 5;
    // The deletion timestamp of the backup policy
    // This is a read-only value.
    google.protobuf.Timestamp deleted_at = 6;
    // Set when this backup policy is deleted.
    // This is a read-only value.
    bool is_deleted = 7;
     // Pause this backup policy.
     // When a backup policy is paused, the backup policy will not result in new backups.
     // The backup policy isn't deleted, unsetting this field will resume the creation of backups again.
    bool is_paused = 8;

    message Schedule{
        // Schedule type should be one of the following string: "Hourly|Daily|Monthly"
        // The schedule_hourly, schedule_daily or schedule_montly field should be set
        // Setting multiple fields, or inconsistent with this field result in an error during create/update
        string schedule_type = 1;

        message HourlySchedule{
            // Schedule should run with an interval of the specified hours
            // This is applicable for Hourly type only, ignored for Daily and Monthly
            int32 schedule_every_interval_hours = 1;
        }
        // Schedule applies to the selected day of the week
        // This is applicable for Daily type only, ignored for Hourly and Monthly
        HourlySchedule schedule_hourly = 2;

        message DailySchedule{
            // Run the backup on Monday
            bool monday = 1;
            // Run the backup on Tuesday
            bool tuesday = 2;
            // Run the backup on Wednesday
            bool wednesday = 3;
            // Run the backup on Thursday
            bool thursday = 4;
            // Run the backup on Friday
            bool friday = 5;
            // Run the backup on Saturday
            bool saturday = 6;
            // Run the backup on Sunday
            bool sunday = 7;
            // The (target) time of the schedule
            // We ignore the date part, and concidering the time part (including time-zone) only.
            // TODO: Better type...
            google.protobuf.Timestamp schedule_at = 10;
        }
        // Schedule applies to the selected day of the week
        // This is applicable for Daily type only, ignored for Hourly and Monthly
        DailySchedule schedule_daily = 3;

        message MonthlySchedule{
            // Run the backup on the first day of the month
            bool first = 1;
            // Run the backup on the last day of the month
            bool last = 2;
            // Run the backup on the specified day of the month
            int32 day_of_month = 3;
            // The (target) time of the schedule
            // We ignore the date part, and concidering the time part (including time-zone) only.
            // TODO: Better type...
            google.protobuf.Timestamp schedule_at = 10;
        }
        // Schedule applies to the selected day of the month
        // This is applicable for Monthly type only, ignored for Hourly and Daily
        MonthlySchedule schedule_monthly = 4;

        // The resulting cron notation of this schedule used by the system
        // This is a read-only value.
        // TODO move to internal-api: string cronSchedule = 10; 
    }
    // The schedule for this backup policy 
    Schedule schedule = 9;
    
    // Upload the backup, created by the backup policy, to an external source.
    bool upload = 10;
   
    // Backups created by this policy will be automatically deleted after the specified duration 
    // A value of 0 means that backup will never be deleted.
    google.protobuf.Duration auto_delete_after = 11;

    // The owners of the organization can be notified by email
    // This field support the following values: "None|FailureOnly|Always"
    string email_notification = 12;

    // Status of the backup policy
    // All members of this field are read-only.
    message Status {
        // The timestamp when the next backup - initiated by this backup policy - will be created 
        google.protobuf.Timestamp next_backup = 1;
        // Message in case of failure, otherwise an empty string 
        string message = 2;        
    }
    // Status of the backup policy
    Status status = 100;

}

// List of backup policies.
message BackupPolicyList {
    repeated BackupPolicy items = 1;
}

// Request arguments for ListBackupPolicies
message ListBackupPoliciesRequest {
    // Common list options, the context_id should refer to a deployment_id
    common.v1.ListOptions options = 1;
    // If set, the result includes all backup providers, including those who set to deleted, 
    // however are not removed from the systemare available for the
    // If not set, only backup providers not indicated as delted are returne.
    bool include_deleted = 2;
}

// Backup represents a single backup for a deployment.
message Backup {
    // System identifier of the backup.
    // This is a read-only value.
    string id = 1;
    // URL of this resource
    // This is a read-only value.
    string url = 2;
    // Description of the backup 
    string description = 3; 
    // Identifier of the deployment that owns this backup.
    // After creation, this value cannot be changed.
    string deployment_id = 4;
    // Identifier of the backup policy that triggered this backup
    // After creation, this value cannot be changed.
    // If this field is empty, this is a manual backup
    string backup_policy_id = 5;
    // The creation timestamp of the backup (database object)
    // This is a read-only value.
    google.protobuf.Timestamp created_at = 6;
    // The deletion timestamp of the backup 
    // This is a read-only value.
    google.protobuf.Timestamp deleted_at = 7;
    // Set when this backup is deleted.
    // This is a read-only value.
    bool is_deleted = 8;

    // The timestamp that this backup will be automatically removed
    // You cannot provide a value in the past, 
    // If the field is not set, the backup will not be automatically removed.  
    google.protobuf.Timestamp auto_deleted_at = 9;

    // Information about the deployment during backup 
    // All members of this field are read-only.
    message DeploymentInfo {
        // ArangoDB version of the deployment during backup.
        string version = 1;
        // Servers spec of the deployment during backup.
        data.v1.Deployment.ServersSpec  servers = 2;
    }
    // Information about the deployment during backup 
    DeploymentInfo deployment_info = 10;

    // Upload the backup, created by the backup policy, to an external source.
    // Setting or unsetting this fields after the backup has been created will upload/delete the backup from the external source.
    // Setting this field when status.available = false will result in an error
    bool upload = 11;

    // Status of the actual backup
    // All members of this field are read-only.
    message Status {
        // The id of the backup 
        // TODO move to internal-api: string id = 1;
        // The creation timestamp of the backup 
        google.protobuf.Timestamp created_at = 2;
        // ArangoDB version of the backup 
        string version = 3;
        // The state of the backup
        // Will be one of the following: "Pending|Scheduled|Download|DownloadError|Downloading|Create|Upload|Uploading|UploadError|Ready|Deleted|Failed"  
        string state = 4;
        // Set when the backup is failed
        bool is_failed = 5;
        // State message  
        string message = 6;
        // Progress of the backup (upload or download)
        string progress = 7;
        // Size of the backup (in bytes)
        int32 size_bytes = 8;
        // Set when the backup has been fully uploaded
        bool uploaded = 9;
        // Set when the backup has been fully downloaded
        bool downloaded = 10;
        // Set when the backup is available to restore to / recover from
        bool available = 11;
    }
    // Status of the actual backup
    Status status = 100;
}

// List of backups.
message BackupList {
    repeated Backup items = 1;
}

// Request arguments for ListBackups
message ListBackupsRequest {
    // Common list options, the context_id should refer to a deployment_id
    common.v1.ListOptions options = 1;
    // Request backups that are created at or after this timestamp.
    // This is an optional field.
    google.protobuf.Timestamp from = 2;
    // Request backups that are created before this timestamp.
    // This is an optional field.
    google.protobuf.Timestamp to = 3;
}
