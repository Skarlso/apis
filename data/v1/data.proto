// 
// DISCLAIMER
// 
// Copyright 2020 ArangoDB GmbH, Cologne, Germany
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// Copyright holder is ArangoDB GmbH, Cologne, Germany
// 
// Author Ewout Prangsma
// 

syntax = "proto3";

package arangodb.cloud.data.v1;

option go_package = "github.com/arangodb-managed/apis/data/v1";

import "common/v1/common.proto";

import "github.com/golang/protobuf/ptypes/timestamp/timestamp.proto";
import "google/api/annotations.proto";

// DataService is the API used to configure data objects.
service DataService {
    // Get the current API version of this service.
    // Required permissions:
    // - None
    rpc GetAPIVersion(common.v1.Empty) returns (common.v1.Version) {
        option (google.api.http) = {
            get: "/api/data/v1/api-version"
        };
    }

    // Fetch all deployments in the project identified by the given context ID.
    // Required permissions:
    // - data.deployment.list on the project identified by the given context ID
    rpc ListDeployments(common.v1.ListOptions) returns (DeploymentList) {
        option (google.api.http) = {
            get: "/api/data/v1/projects/{context_id}/deployments"
        };
    }

    // Fetch a deployment by its id.
    // Required permissions:
    // - data.deployment.get on the deployment identified by the given ID
    rpc GetDeployment(common.v1.IDOptions) returns (Deployment) {
        option (google.api.http) = {
            get: "/api/data/v1/deployments/{id}"
        };
    }

    // Create a new deployment
    // Required permissions:
    // - data.deployment.create on the project that owns the deployment
    // Note that deployment.status & deployment.expiration are ignored
    // in this request.
    rpc CreateDeployment(Deployment) returns (Deployment) {
        option (google.api.http) = {
            post: "/api/data/v1/project/{project_id}/deployments"
            body: "*"
        };
    }

    // Update a deployment
    // Required permissions:
    // - data.deployment.update on the deployment
    // Note that deployment.status & deployment.expiration are ignored
    // in this request.
    rpc UpdateDeployment(Deployment) returns (Deployment) {
        option (google.api.http) = {
            patch: "/api/data/v1/deployments/{id}"
            body: "*"
        };
    }

    // Delete a deployment
    // Note that deployments are initially only marked for deletion.
    // Once all their resources are removed the deployment itself is removed.
    // Required permissions:
    // - data.deployment.delete on the deployment
    rpc DeleteDeployment(common.v1.IDOptions) returns (common.v1.Empty) {
        option (google.api.http) = {
            delete: "/api/data/v1/deployments/{id}"
        };
    }

    // Fetch credentials for accessing deployment by its id.
    // Required permissions:
    // - data.deployment.get on the deployment identified by the given ID
    // - data.deploymentcredentials.get on the deployment identified by the given ID
    rpc GetDeploymentCredentials(DeploymentCredentialsRequest) returns (DeploymentCredentials) {
        option (google.api.http) = {
            get: "/api/data/v1/deploymentcredentials/{deployment_id}"
        };
    }

    // Fetch all ArangoDB versions that are available for deployments.
    // Required permissions:
    // - None
    rpc ListVersions(ListVersionsRequest) returns (VersionList) {
        option (google.api.http) = {
            get: "/api/data/v1/versions"
        };
    }

    // Fetch the default ArangoDB version for new deployment.
    // Required permissions:
    // - None
    rpc GetDefaultVersion(common.v1.Empty) returns (Version) {
        option (google.api.http) = {
            get: "/api/data/v1/versions/default"
        };
    }

    // Fetch the limits for server specifications for deployments
    // owned by the given projected, created in the given region.
    // Required permissions:
    // - data.limits.get on the requested project
    // - data.deployment.get on the specified deployment (if deployment_id is set)
    // This method is deprecated.
    rpc GetServersSpecLimits(ServersSpecLimitsRequest) returns (ServersSpecLimits) {
        option (google.api.http) = {
            get: "/api/data/v1/projects/{project_id}/regions/{region_id}/limits"
        };
    }

    // Fetch the node sizes available for deployments
    // owned by the project with given ID, created in the given region with given ID.
    // If project ID "all" is used, then all node sizes for the region with given
    // ID are returned.
    // Required permissions:
    // - data.nodesize.list on the requested project (if project ID does not equal "all")
    // - None if project ID does equals "all"
    rpc ListNodeSizes(NodeSizesRequest) returns (NodeSizeList) {
        option (google.api.http) = {
            get: "/api/data/v1/projects/{project_id}/regions/{region_id}/nodesizes"
        };
    }

    // Fetch the models available for deployments owned by the project with given ID.
    // Required permissions:
    // - data.deploymentmodel.list on the requested project
    rpc ListDeploymentModels(ListDeploymentModelsRequest) returns (DeploymentModelList) {
        option (google.api.http) = {
            get: "/api/data/v1/projects/{project_id}/deploymentmodels"
        };
    }

    // Fetch the CPU sizes available for deployments owned by the project with given ID.
    // Required permissions:
    // - data.cpusize.list on the requested project
    rpc ListCPUSizes(ListCPUSizesRequest) returns (CPUSizeList) {
        option (google.api.http) = {
            get: "/api/data/v1/projects/{project_id}/cpusizes"
        };
    }

    // Calculate the total size of a deployment with given arguments.
    // Required permissions:
    // - none
    rpc CalculateDeploymentSize(CalculateDeploymentSizeRequest) returns (DeploymentSize) {
        option (google.api.http) = {
            get: "/api/data/v1/deployment-size/calculate"
        };
    }

    // Recommend a deployment size, for a oneshard or sharded deployments, using the
    // given input values.
    // Required permissions:
    // - none
    rpc RecommendDeploymentSize(DeploymentSizeRequest) returns (DeploymentSizeRecommendation) {
        option (google.api.http) = {
            get: "/api/data/v1/deployment-size/recommend"
        };
    }

    // Fetch instructions for connecting drivers to the deployment identified by the given id.
    // Required permissions:
    // - data.deployment.get on the deployment identified by the given ID
    rpc GetConnectDriverInstructions(common.v1.IDOptions) returns (ConnectDriverInstructions) {
        option (google.api.http) = {
            get: "/api/data/v1/deployments/{id}/connect-driver-instructions"
        };
    }

    // Fetch instructions for importing data into the deployment identified by the given id.
    // Required permissions:
    // - data.deployment.get on the deployment identified by the given ID
    rpc GetImportDataInstructions(common.v1.IDOptions) returns (ImportDataInstructions) {
        option (google.api.http) = {
            get: "/api/data/v1/deployments/{id}/import-data-instructions"
        };
    }

    // Calculate the price of a deployment of given settings.
    // Required permissions:
    // - data.deploymentprice.calculate
    rpc CalculateDeploymentPrice(DeploymentPriceRequest) returns (DeploymentPrice) {
        option (google.api.http) = {
            get: "/api/data/v1/deployment-price/calculate"
        };
    }

    // Get the features that will be available to a deployment in the given context.
    // Required permissions:
    // - data.deploymentfeatures.get on the project that is given in the request.
    rpc GetDeploymentFeatures(DeploymentFeaturesRequest) returns (DeploymentFeatures) {
        option (google.api.http) = {
            post: "/api/data/v1/deployment-features"
            body: "*"
        };
    }
}

// A Deployment is represents one deployment of an ArangoDB cluster.
message Deployment {   
    // System identifier of the deployment.
    // This is a read-only value.
    string id = 1;
    // URL of this resource
    // This is a read-only value.
    string url = 2;
    // Name of the deployment
    string name = 3; 
    // Description of the deployment
    string description = 4; 
    // Identifier of the project that owns this deployment.
    // After creation, this value cannot be changed.
    string project_id = 5;
    // Identifier of the region in which the deployment is created.
    // After creation, this value cannot be changed.
    string region_id = 6;
    // The creation timestamp of the deployment
    // This is a read-only value.
    google.protobuf.Timestamp created_at = 7;
    // The deletion timestamp of the deployment
    // This is a read-only value.
    google.protobuf.Timestamp deleted_at = 8;
    // Set when this deployment is deleted.
    // This is a read-only value.
    bool is_deleted = 9;
    // Optional identifier of the support plan selected for this deployment.
    // After creation, this value cannot be changed.
    // If no support plan identifier is set, the default support plan is used.
    string support_plan_id = 10;
    // Identifier of the user who created this deployment.
    // This is a read-only value.
    string created_by_id = 11;
    // This field must be set to the identifier of the current Terms&Conditions 
    // when creating a deployment.
    // If the tier of the organization does not require a non-empty Terms&Condition
    // identifier, this field may be left empty.
    // This is a read-only value after creation.
    string accepted_terms_and_conditions_id = 12;

    // ArangoDB version to use for this deployment.
    // See Version.version.
    // If you change this value to a higher version,
    // the deployment will be upgraded.
    // If you change this value to a lower patch value,
    // the deployment will be downgraded.
    // Any attempt to change to a lower minor or major version
    // is considered an invalid request.
    // Any attempt to change to a version that is not in the
    // list of available versions is considered an invalid request.
    string version = 101;

    message CertificateSpec {
        // Identifier of the CACertificate used to sign TLS certificates for the deployment.
        // If you change this value after the creation of the deployment a complete
        // rotation of the deployment is required, which will result in some downtime.
        string ca_certificate_id = 1;
        // Zero or more DNS names to include in the TLS certificate of the deployment.
        repeated string alternate_dns_names = 2;
    }
    CertificateSpec certificates = 102;

    message ServersSpec {
        // Number of coordinators of the deployment
        // This field is automatically set unless the flexible model is used.
        int32 coordinators = 1;
        // Amount of memory (in GB) to allocate for coordinators.
        // This field is automatically set unless the flexible model is used.
        int32 coordinator_memory_size = 2;
        // Custom command line arguments passed to all coordinators.
        // This field is ignored set unless the flexible model is used.
        repeated string coordinator_args = 3;

        // Number of dbservers of the deployment
        // This field is automatically set unless the flexible model is used.
        int32 dbservers = 11;
        // Amount of memory (in GB) to allocate for dbservers.
        // This field is automatically set unless the flexible model is used.
        int32 dbserver_memory_size = 12;
        // Amount of disk space (in GB) to allocate for dbservers.
        // This field is automatically set unless the flexible model is used.
        int32 dbserver_disk_size = 13;
        // Custom command line arguments passed to all dbservers.
        // This field is ignored set unless the flexible model is used.
        repeated string dbserver_args = 14;
    }
    ServersSpec servers = 103;

    // Optional identifier of IP whitelist to use for this deployment.
    string ipwhitelist_id = 105;

    message ModelSpec {
        // Type of model being used
        string model = 1;
        // Size of nodes being used
        // This field is ignored set in case the flexible model is used.
        string node_size_id = 2;
        // Number of nodes being used
         // This field is ignored set in case the flexible model is used.
        int32 node_count = 3;
        // Amount of disk space per node (in GB)
         // This field is ignored set in case the flexible model is used.
        int32 node_disk_size = 4;
    }
    ModelSpec model = 106;

    // If provided, dataclusterd will use this custom image tag instead of the configured one for a given version.
    // Further, ImagePullPolicy will be set to Always.
    // This field can only be set by selected organizations.
    string custom_image = 107;

    // Optional identifier of IAM provider to use for this deployment.
    string iamprovider_id = 108;

    // Status of a single server (of the ArangoDB cluster)
    message ServerStatus {
        // ID of the server
        string id = 1;
        // Type of server (agent|coordinator|dbserver)
        string type = 2;
        // Human readable description of the status of the deployment.
        string description = 3;
        // The creation timestamp of the server
        google.protobuf.Timestamp created_at = 4;
        // Set once the server is ready
        bool ready = 5;
        // Set once the server has been known to be a member of the cluster
        bool member_of_cluster = 6;
        // Set if the server is in a failed state
        // Every server is always in 1 (and only 1) of these state: failed/creating/ok/upgrading.
        bool failed = 7;
        // Set if the server is still being created
        // Every server is always in 1 (and only 1) of these state: failed/creating/ok/upgrading.
        bool creating = 8;
        // Set if the server is in the ok state.
        // Every server is always in 1 (and only 1) of these state: failed/creating/ok/upgrading.
        bool ok = 9;
        // Set if the server is still being upgraded
        // Every server is always in 1 (and only 1) of these state: failed/creating/ok/upgrading.
        bool upgrading = 10;
        // Latest known ArangoDB version used by this server.
        // Initially this field is empty.
        string version = 11;
        // The last started timestamp of the server
        google.protobuf.Timestamp last_started_at = 12;
        // Information about the data volume used to store the data
        DataVolumeInfo data_volume_info = 20;
    }

    // Status of the deployment
    // All members of this field are read-only.
    message Status {
        // Endpoint URL used to reach the deployment
        // This value will be empty during the creation of the deployment.
        // This field always contains the URL of the low port (8529) of the
        // deployment.
        // If a certificate with well known certificate is used, this
        // port is using the well known certificate.
        // Otherwise this port is using the self-signed certificate.
        // This endpoint is recommended for human-to-database connections.
        string endpoint = 1;
        // Human readable description of the status of the deployment.
        string description = 2;
        // Set once the deployment has been created.
        bool created = 3;
        // Set if the deployment is ready to be used.
        // If the deployment has downtime (e.g. because of changing a CA certificate)
        // this will go to false until the downtime is over.
        bool ready = 4;
        // Set if the deployment is being upgraded.
        bool upgrading = 5;
        // Versions of running servers
        repeated string server_versions = 6;
        // Status of individual servers of the deployment
        repeated ServerStatus servers = 7;
        // Set if the ready boolean is transitioned to true for the very first time.
        google.protobuf.Timestamp bootstrapped_at = 8;
        // Set if bootstrapped_at has a value, otherwise false.
        bool bootstrapped = 9;
        // Endpoint URL used to reach the deployment on the port that uses 
        // the self-signed certificate.
        // This endpoint is recommended for machine-to-database connections.
        string endpoint_self_signed = 10;
        // The status of backup restore (if applicable).
        // This field will be set to empty if a new revision of the spec is available
        BackupRestoreStatus backup_restore_status = 100;
        // The total size of all backups in the external source (in bytes)
        int64 total_backup_size_bytes = 101;
        // Set if there is any backup currently uploading data to the external source
        bool backup_upload_in_progress = 102;
    }
    Status status = 201;

    // The status of backup restore
    // All members of this message are read-only.
    message BackupRestoreStatus {
        // The revision of the used BackupRestoreSpec 
        int32 revision = 1;
        // Set if the deployment is preparing or restoring a backup
        bool restoring = 10;
        // Status of the restore backup operation.
        // Enum of the following values: "<empty>|Preparing|Restoring|Restored|Failed"
        string status = 11;
        // Failure reason of the backup restore (if applicable)
        string failure_reason = 12; 
    }

    // Detailed size of the deployment
    // This is a read-only field.
    DeploymentSize size = 202;

    // Expiration of the deployment.
    // All members of this message are read-only.
    message Expiration {
        // The expiration timestamp of the deployment
        // If not set, the deployment will not expire.
        google.protobuf.Timestamp expires_at = 1;
        // Human readable reason for why the deployment expires (or does not expire).
        string reason = 2;
        // The timestamp of when the last "this deployment will expire at" email was
        // send.
        // If not set, no such email has been send.
        google.protobuf.Timestamp last_warning_email_send_at = 3;
        // List of email addresses to which the last warning email has been send.
        // Not set when no such email has been send.
        repeated string last_warning_email_send_to = 4;
    }
    Expiration expiration = 301;

    // Information about a backup restore.
    // All members of this message are read-only. 
    message BackupRestoreSpec {  
        // The revision of this BackupRestoreSpec 
        int32 revision = 1;
        // The timestamp of when the last revision has been updated.
        google.protobuf.Timestamp last_updated_at = 2;
        // Identifier of a backup to restore to.
        string backup_id = 10;
    }
    // Information about a backup restore.
    // If this field is set the deployment will be restored to that backup.
    // This is a read-only field. To set this field please use the backup service RestoreBackup method.
    BackupRestoreSpec backup_restore = 401;

    // Recommendations made for deployments using the "oneshard" or "sharded" model.
    repeated DeploymentSizeRecommendation deployment_recommendations = 501;
}

// NodeSize specifies the size constraints of different data nodes.
message NodeSize {
    // System identifier of the node size
    string id = 1;
    // Human readable name of the node size
    string name = 2;
    // Amount of memory (in GB) that is available on this size of node.
    int32 memory_size = 3;
    // Minimum amount of disk (in GB) that is available on this size of node.
    int32 min_disk_size = 4;
    // Maximum amount of disk (in GB) that is available on this size of node.
    int32 max_disk_size = 5;
    // CPU size that is available on this size of node (e.g. standard or high).
    string cpu_size = 6;
    // If set, contains list of possible disk sizes (in GB) for the node.
    // In that case, this field overrides the min_disk_size & max_disk_size fields.
    repeated int32 disk_sizes = 7;
}

// List of node sizes.
message NodeSizeList {
    repeated NodeSize items = 1;
}

// Request arguments for ListNodeSizes
message NodeSizesRequest {
    // Identifier of project that will own a deployment.
    string project_id = 1;
    // Identifier of a region in which a deployment will be created.
    string region_id = 2;
    // If set, project_id & region_id will be taken from this deployment.
    // This also causes the node_size used by this deployment to be included
    // in the result, if it it would not match for new deployments.
    string deployment_id = 3;
}

// DeploymentModel specifies the a specific model of deploying
// arangodb clusters.
message DeploymentModel {
    // System identifier of the model (e.g. oneshard)
    string id = 1;
    // Human readable name of the model (e.g. One shard)
    string name = 2;
}

// List of deployment models.
message DeploymentModelList {
    repeated DeploymentModel items = 1;
}

// Request arguments for ListDeploymentModels
message ListDeploymentModelsRequest {
    // Identifier of project that will own a deployment.
    string project_id = 1;
}

// CPUSize specifies the a specific level of CPU for a node.
message CPUSize {
    // System identifier of the size (e.g. standard)
    string id = 1;
    // Human readable name of the size (e.g. Standard)
    string name = 2;
}

// List of CPU sizes.
message CPUSizeList {
    repeated CPUSize items = 1;
}

// Request arguments for ListCPUSizes
message ListCPUSizesRequest {
    // Identifier of project that will own a deployment.
    string project_id = 1;
}

// Request arguments for GetDeploymentCredentials
message DeploymentCredentialsRequest {
    // Identifier of deployment to request credentials for.
    string deployment_id = 1;
    // Reason for requesting the credentials
    string reason = 2;
}

// Result for GetDeploymentCredentials
message DeploymentCredentials {
    // Name of the user for which credentials were asked.
    // Default to username of root user.
    string username = 1;
    // Password of the user for which credentials were asked.
    string password = 2;
}

// List of Deployments.
message DeploymentList {
    // Actual deployments
    repeated Deployment items = 1;
    // Budget for deployments
    common.v1.Budget budget = 2;
}

// Version of an ArangoDB release
message Version {
    // Version in the format of major.minor.patch
    string version = 1;
}

// List of Versions.
message VersionList {
    repeated Version items = 1;
}

// Request arguments for ListVersions.
message ListVersionsRequest {
    // Common list options
    common.v1.ListOptions options = 1;
    // If set, the result includes all versions for that are available for the
    // organization identified by this ID.
    // If not set, only versions are returned that are available to all organizations.
    string organization_id = 2;
    // If set, only versions will be returned that are safe to upgrade to from this version.    
    string current_version = 3;
}

// Request arguments for ListServersSpecLimits
message ServersSpecLimitsRequest {
    // Identifier of project that will own a deployment.
    string project_id = 1;
    // Identifier of a region in which a deployment will be created.
    string region_id = 2;
    // Optional identifier of a deployment for which compatible server specifications are request.
    string deployment_id = 3;
}

// Limits of allowed values for fields of Deployment.ServersSpec.
message ServersSpecLimits {
    message Limits {
        // Minimum value
        int32 min = 1;
        // Maximum value
        int32 max = 2;
        // Set of allowed values.
        // If this field is non-empty, only one of these values
        // is allowed.
        repeated int32 allowed_values = 3;
    }
    // Limits for the number of coordinators of the deployment
    Limits coordinators = 1;
    // Possible values for the amount of memory (in GB) to allocate
    // for coordinators.
    Limits coordinator_memory_size = 2;

    // Limits for the number of dbservers of the deployment
    Limits dbservers = 11;
    // Possible values for the amount of memory (in GB) to allocate
    // for dbservers.
    Limits dbserver_memory_size = 12;
    // Amount of disk space (in GB) to allocate for dbservers.
    Limits dbserver_disk_size = 13;

    // Possible values for the amount of memory (in GB) to allocate
    // for pairs of coordinator, dbserver.
    Limits node_memory_size = 21;
    // Possible values for the number of nodes.
    // Value must be min/max (not using allowed_values)
    Limits node_count = 22;
}

// Request arguments for CalculateDeploymentSize
message CalculateDeploymentSizeRequest {
    // Number of coordinators of the deployment
    // This field is ignored unless model is "flexible".
    int32 coordinators = 1;
    // Amount of memory (in GB) to allocate for each coordinator.
    // This field is ignored unless model is "flexible".
    int32 coordinator_memory_size = 2;

    // Number of dbservers of the deployment
    // This field is ignored unless model is "flexible".
    int32 dbservers = 11;
    // Amount of memory (in GB) to allocate for each dbserver.
    // This field is ignored unless model is "flexible".
    int32 dbserver_memory_size = 12;
    // Amount of disk space (in GB) to allocate for each dbserver.
    // This field is ignored unless model is "flexible".
    int32 dbserver_disk_size = 13;

    // Type of model being used
    string model = 21;
    // Size of nodes being used
    string node_size_id = 22;
    // Number of nodes being used
    int32 node_count = 23;
    // Amount of disk space per node (in GB)
    int32 node_disk_size = 34;

    // ID of region in which the deployment will be created.
    string region_id = 50;
}

// Result of CalculateDeploymentSize
message DeploymentSize {
    // Number of agents
    int32 agents = 1;
    // Amount of memory (in GB) to allocate for each agent.
    int32 agent_memory_size = 2;
    // Amount of disk space (in GB) to allocate for each agent.
    int32 agent_disk_size = 3;
    // Total (combined) amount of memory (in GB) used by all servers (agents, coordinators & dbservers)
    int32 total_memory_size = 11; 
    // Total (combined) amount of disk space (in GB) used by all servers (agents & dbservers)
    int32 total_disk_size = 12; 
}

// Request arguments for RecommendDeploymentSize.
message DeploymentSizeRequest {
    // Size of entire dataset (on disk) in GB.
    // Required field.
    // Must be >= 1.
    int32 dataset_size = 1;
    // Primary use case for the database
    // Possible values:
    // - GRAPH
    // - DOCUMENT
    // - MULTIMODEL
    // - KEYVALUE
    string usecase = 2;
    // Customer preferred model
    string model = 3;
    // File format on dataset
    // Possible values:
    // - JSON
    // - CSV
    string file_format = 4;
    // Number of documents in the entire dataset (in case of JSON).
    // Number of rows in the entire dataset (in case of CSV).
    int64 number_of_documents = 5;
    // Largest number of columns of the dataset (in case of CSV).
    int32 number_of_columns = 6;
    // Percentage of dataset_size that is considered "hot"
    // Must be >= 0.0 and <= 1.0
    float working_set_percentage = 7;
    // Percentage of operations that are READ
    // Must be >= 0.0 and <= 1.0
    float access_read_percentage = 8;
    // Percentage of operations that are CREATE
    // Must be >= 0.0 and <= 1.0
    float access_create_percentage = 9;
    // Percentage of operations that are UPDATE
    // Must be >= 0.0 and <= 1.0
    float access_update_percentage = 10;
    // Increase factor of the dataset_size in 1 year.
    float growth_rate = 11;
    // Desired number of replicas.
    // Must be >= 3 and <= 5
    int32 replication_factor = 12;

    // Identifier of project to request a recommendation in
    string project_id = 21;
    // Identifier of region to request a recommendation in
    string region_id = 22;
}

// Response of RecommendDeploymentSize.
message DeploymentSizeRecommendation {
    // Request that resulted in this recommendation.
    DeploymentSizeRequest request = 1;
    // Time when the recommendation was made.
    google.protobuf.Timestamp created_at = 2;

    // Amount of memory space per node (in GB) being recommended
    int32 node_memory_size = 11;
    // Amount of disk space per node (in GB) being recommended
    int32 node_disk_size = 12;
    // Number of nodes being recommended
    int32 node_count = 13;

    // If set, this recommendation does not fit in
    // the callers quota.
    bool exceeds_quota = 21;
    // If set, this recommendation does not fit in
    // the Oasis platform.
    bool exceeds_platform = 22;
}

// DataVolumeInfo provides information about a data volume
message DataVolumeInfo {
    // The total number of bytes of the data volume.
    int64 total_bytes = 1;
    // The number of bytes used on the data volume.
    int64 used_bytes = 2;
    // The number of bytes available on the data volume.
    int64 available_bytes = 3;
    // When this info has been measused
    google.protobuf.Timestamp measured_at = 10;
}

// Instructions for connecting a driver to a deployment
message ConnectDriverInstructions {
    // Instructions for a specific driver
    message DriverInstructions {
        // Human readable name of the driver.
        // E.g. "ArangoDB Go driver"
        string name = 1;
        // Lines of code
        repeated string code = 2;
        // Human readable remarks
        repeated string remarks = 3;
        // URL for getting more information on the driver.
        string driver_url = 4;
    }

    // Per driver instructions for connecting to a deployment
    repeated DriverInstructions drivers = 1;
}

// Instructions for importing data into a deployment
message ImportDataInstructions {
    // Lines of code to run arangorestore
    repeated string import_dump = 2;
}

// Arguments for requesting a price a deployment of given properties.
message DeploymentPriceRequest {
    // Identifier of organization containing the deployment.
    string organization_id = 1;
    // Identifier of project containing the deployment.
    string project_id = 2;
    // Identifier of the support plan of the deployment.
    string support_plan_id = 3;
    // Identifier of the cloud provider of the deployment.
    string cloud_provider_id = 4;
    // Identifier of the cloud region of the deployment.
    string cloud_region_id = 5;
    // Model of the deployment.
    string model = 6;
    // Node size use for deployments
    string node_size_id = 7;
    // Number of nodes being used
    // This field is ignored if model is "flexible".
    int32 node_count = 8;
    // Amount of disk space per node (in GB)
    // This field is ignored if model is "flexible".
    int32 node_disk_size = 9;

    // Number of coordinators of the deployment
    // This field is ignored unless model is "flexible".
    int32 coordinators = 10;
    // Amount of memory (in GB) to allocate for each coordinator.
    // This field is ignored unless model is "flexible".
    int32 coordinator_memory_size = 11;

    // Number of dbservers of the deployment
    // This field is ignored unless model is "flexible".
    int32 dbservers = 12;
    // Amount of memory (in GB) to allocate for each dbserver.
    // This field is ignored unless model is "flexible".
    int32 dbserver_memory_size = 13;
    // Amount of disk space (in GB) to allocate for each dbserver.
    // This field is ignored unless model is "flexible".
    int32 dbserver_disk_size = 14;
}

message DeploymentPrice {
    // Price per hour in given currency for the deployment.
    float price_per_hour = 1;
    // Network transfer prices (variable depending on usage)
    repeated NetworkTransferPrice network_transfer_prices = 2;
    // Network transfer prices (variable depending on usage)
    BackupPrice backup_price = 3;
    // Identifier of the currency in which the price is specified.
    string currency_id = 4;

    message NetworkTransferPrice {
        // Price per GB of network transfer into the database
        float ingress_price_per_gb = 1;
        // Price per GB of network transfer out of the database
        float egress_price_per_gb = 2;
        // Description of this price
        string description = 3;
    }

    message BackupPrice {
        // Price per GB/hour of uploaded backup storage
        float price_per_gb_per_hour = 1;
    }
}

// Features that are available to new deployments in a given context.
message DeploymentFeatures {
    // Is the use of an IAM provider available?
    bool iamprovider = 1;
}

// Request arguments for GetDeploymentFeatures
message DeploymentFeaturesRequest {
    // Identifier of project that will own a deployment.
    string project_id = 1;
    // Identifier of a region in which a deployment will be created.
    string region_id = 2;
    // Model of the intended deployment.
    string model = 3;
    // Node size use for the intended deployments
    string node_size_id = 4;
}

