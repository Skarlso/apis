//
// This file is AUTO-GENERATED by protoc-gen-ts.
// Do not modify it manually.
///
import api from '../../api'
import * as googleTypes from '../../googleTypes'
import { IDOptions as arangodb_cloud_common_v1_IDOptions } from '../../common/v1/common'
import { ListOptions as arangodb_cloud_common_v1_ListOptions } from '../../common/v1/common'
import { Deployment_ServersSpec as arangodb_cloud_data_v1_Deployment_ServersSpec } from '../../data/v1/data'

// File: backup/v1/backup.proto
// Package: arangodb.cloud.backup.v1

// Backup represents a single backup for a deployment.
export interface Backup {
  // System identifier of the backup.
  // This is a read-only value.
  // string
  id?: string;
  
  // URL of this resource
  // This is a read-only value.
  // string
  url?: string;
  
  // Description of the backup
  // string
  description?: string;
  
  // Identifier of the deployment that owns this backup policy.
  // After creation, this value cannot be changed.
  // string
  deployment_id?: string;
  
  // Identifier of the backup policy that triggered this backup
  // After creation, this value cannot be changed.
  // If this field is empty, this is a manual backup
  // string
  backup_policy_id?: string;
  
  // The creation timestamp of the backup (database object)
  // This is a read-only value.
  // googleTypes.Timestamp
  created_at?: googleTypes.Timestamp;
  
  // The deletion timestamp of the backup
  // This is a read-only value.
  // googleTypes.Timestamp
  deleted_at?: googleTypes.Timestamp;
  
  // Set when this backup is deleted.
  // This is a read-only value.
  // boolean
  is_deleted?: boolean;
  
  // The timestamp that this backup will be automatically removed
  // googleTypes.Timestamp
  auto_deleted_at?: googleTypes.Timestamp;
  
  // Information about the deployment during backup
  // Backup_DeploymentInfo
  deployment_info?: Backup_DeploymentInfo;
  
  // Status of the actual backup
  // Backup_Status
  status?: Backup_Status;
}

// Information about the deployment during backup
// All members of this field are read-only.
export interface Backup_DeploymentInfo {
  // ArangoDB version of the deployment during backup.
  // string
  version?: string;
  
  // Servers spec of the deployment during backup.
  // arangodb.cloud.data.v1.Deployment.ServersSpec
  servers?: arangodb_cloud_data_v1_Deployment_ServersSpec;
}

// Status of the actual backup
// All members of this field are read-only.
export interface Backup_Status {
  // The id of the backup
  // string
  id?: string;
  
  // The creation timestamp of the backup
  // googleTypes.Timestamp
  created_at?: googleTypes.Timestamp;
  
  // ArangoDB version of the backup
  // string
  version?: string;
  
  // The state of the backup
  // Will be one of the following: "Pending|...|Failed"
  // string
  state?: string;
  
  // State message
  // string
  message?: string;
  
  // Progesss of the backup
  // string
  progress?: string;
  
  // Size of the backup (in bytes)
  // number
  size_bytes?: number;
  
  // Set when the backup has been fully uploaded
  // boolean
  uploaded?: boolean;
  
  // Set when the backup has been fully downloaded
  // boolean
  downloaded?: boolean;
  
  // Set when the backup is available to restore to / recover from
  // boolean
  available?: boolean;
}

// List of backups.
export interface BackupList {
  // Backup
  items?: Backup[];
}

// BackupPolicy represents a single backup policy for a deployment.
export interface BackupPolicy {
  // System identifier of the backup policy.
  // This is a read-only value.
  // string
  id?: string;
  
  // URL of this resource
  // This is a read-only value.
  // string
  url?: string;
  
  // Name of the backup policy
  // string
  name?: string;
  
  // Identifier of the deployment that owns this backup policy.
  // After creation, this value cannot be changed.
  // string
  deployment_id?: string;
  
  // The creation timestamp of the backup policy
  // This is a read-only value.
  // googleTypes.Timestamp
  created_at?: googleTypes.Timestamp;
  
  // The deletion timestamp of the backup policy
  // This is a read-only value.
  // googleTypes.Timestamp
  deleted_at?: googleTypes.Timestamp;
  
  // Set when this backup policy is deleted.
  // This is a read-only value.
  // boolean
  is_deleted?: boolean;
  
  // Pause this backup policy.
  // When a backup policy is paused, the backup policy will not result in new backups.
  // The backup policy isn't deleted, unsetting this field will resume the creation of backups again.
  // boolean
  is_paused?: boolean;
  
  // The schedule for this backup policy
  // BackupPolicy_Schedule
  schedule?: BackupPolicy_Schedule;
  
  // Upload the backup, created by the backup policy, to an external source.
  // boolean
  upload?: boolean;
  
  // Backups created by this policy will be automatically deleted after the specified duration
  // A value of 0 means that backup will never be deleted.
  // googleTypes.Duration
  auto_delete_after?: googleTypes.Duration;
  
  // The owners of the organization can be notified by email
  // This field support the following values: "None|FailureOnly|Always"
  // string
  email_notification?: string;
  
  // Status of the backup policy
  // BackupPolicy_Status
  status?: BackupPolicy_Status;
}
export interface BackupPolicy_Schedule {
  // Schedule type should be one of the following string: "Hourly|Daily|Monthly"
  // The schedule_hourly, schedule_daily or schedule_montly field should be set
  // Setting multiple fields, or inconsistent with this field result in an error during create/update
  // string
  schedule_type?: string;
  
  // Schedule applies to the selected day of the week
  // This is applicable for Daily type only, ignored for Hourly and Monthly
  // BackupPolicy_Schedule_HourlySchedule
  schedule_hourly?: BackupPolicy_Schedule_HourlySchedule;
  
  // Schedule applies to the selected day of the week
  // This is applicable for Daily type only, ignored for Hourly and Monthly
  // BackupPolicy_Schedule_DailySchedule
  schedule_daily?: BackupPolicy_Schedule_DailySchedule;
  
  // Schedule applies to the selected day of the month
  // This is applicable for Monthly type only, ignored for Hourly and Daily
  // BackupPolicy_Schedule_MonthlySchedule
  schedule_monthly?: BackupPolicy_Schedule_MonthlySchedule;
  
  // The resulting cron notation of this schedule used by the system
  // This is a read-only value.
  // string
  cronSchedule?: string;
}

// Status of the backup policy
// All members of this field are read-only.
export interface BackupPolicy_Status {
  // The timestamp when the next backup - initiated by this backup policy - will be created
  // googleTypes.Timestamp
  next_backup?: googleTypes.Timestamp;
  
  // Message in case of failure, otherwise an empty string
  // string
  message?: string;
}

// List of backup policies.
export interface BackupPolicyList {
  // BackupPolicy
  items?: BackupPolicy[];
}

// Request arguments for ListBackupPolicies
export interface ListBackupPoliciesRequest {
  // Common list options, the context_id should refer to a deployment_id
  // arangodb.cloud.common.v1.ListOptions
  options?: arangodb_cloud_common_v1_ListOptions;
  
  // If set, the result includes all backup providers, including those who set to deleted,
  // however are not removed from the systemare available for the
  // If not set, only backup providers not indicated as delted are returne.
  // boolean
  include_deleted?: boolean;
}

// Request arguments for ListBackups
export interface ListBackupsRequest {
  // Common list options, the context_id should refer to a deployment_id
  // arangodb.cloud.common.v1.ListOptions
  options?: arangodb_cloud_common_v1_ListOptions;
}

// BackupService is the API used to configure backup objects.
export class BackupService {
  // Fetch all backup policies for a specific deployment.
  // Required permissions:
  // - backup.backuppolicy.list on the deployment identified by the given context ID.
  async ListBackupPolicies(req: ListBackupPoliciesRequest): Promise<BackupPolicyList> {
    const path = `/api/backup/v1/deployment/${encodeURIComponent((req.options || {}).context_id || '')}/backuppolicies`;
    const url = path + api.queryString(req, [`options.context_id`]);
    return api.get(url, undefined);
  }
  
  // Fetch a backup policy by its id.
  // Required permissions:
  // - backup.backuppolicy.get on the backup policy
  async GetBackupPolicy(req: arangodb_cloud_common_v1_IDOptions): Promise<BackupPolicy> {
    const path = `/api/backup/v1/backuppolicies/${encodeURIComponent(req.id || '')}`;
    const url = path + api.queryString(req, [`id`]);
    return api.get(url, undefined);
  }
  
  // Create a new backup policy
  // Required permissions:
  // -  backup.backuppolicy.create on the deployment that owns the backup policy.
  async CreateBackupPolicy(req: BackupPolicy): Promise<BackupPolicy> {
    const url = `/api/backup/v1/deployment/${encodeURIComponent(req.deployment_id || '')}/backuppolicies`;
    return api.post(url, req);
  }
  
  // Update a backup policy
  // Required permissions:
  // -  backup.backuppolicy.update on the backup policy
  async UpdateBackupPolicy(req: BackupPolicy): Promise<BackupPolicy> {
    const url = `/api/backup/v1/backuppolicies/${encodeURIComponent(req.id || '')}`;
    return api.patch(url, req);
  }
  
  // Delete a backup policy.
  // Note that the backup policy are initially only marked for deletion.
  // Once all their dependent backups are removed, the backup policy is removed.
  // Required permissions:
  // -  backup.backuppolicy.delete on the backup policy
  async DeleteBackupPolicy(req: arangodb_cloud_common_v1_IDOptions): Promise<void> {
    const path = `/api/backup/v1/backuppolicies/${encodeURIComponent(req.id || '')}`;
    const url = path + api.queryString(req, [`id`]);
    return api.delete(url, undefined);
  }
  
  // Fetch all backups for a specific deployment.
  // Required permissions:
  // - backup.backup.list on the deployment identified by the given context ID.
  async ListBackups(req: ListBackupsRequest): Promise<BackupList> {
    const path = `/api/backup/v1/deployment/${encodeURIComponent((req.options || {}).context_id || '')}/backups`;
    const url = path + api.queryString(req, [`options.context_id`]);
    return api.get(url, undefined);
  }
  
  // Fetch a backup by its id.
  // Required permissions:
  // - backup.backup.get on the backup policy
  async GetBackup(req: arangodb_cloud_common_v1_IDOptions): Promise<Backup> {
    const path = `/api/backup/v1/backup/${encodeURIComponent(req.id || '')}`;
    const url = path + api.queryString(req, [`id`]);
    return api.get(url, undefined);
  }
  
  // Create a new backup
  // Required permissions:
  // -  backup.backup.create on the deployment that owns the backup.
  async CreateBackup(req: Backup): Promise<Backup> {
    const url = `/api/backup/v1/deployment/${encodeURIComponent(req.deployment_id || '')}/backup`;
    return api.post(url, req);
  }
  
  // Update a backup
  // Required permissions:
  // -  backup.backup.update on the backup
  async UpdateBackup(req: Backup): Promise<Backup> {
    const url = `/api/backup/v1/backup/${encodeURIComponent(req.id || '')}`;
    return api.patch(url, req);
  }
  
  // Restore (or recover) a backup
  // Required permissions:
  // -  backup.backup.restore on the backup
  async RestoreBackup(req: arangodb_cloud_common_v1_IDOptions): Promise<void> {
    const path = `/api/backup/v1/backup/${encodeURIComponent(req.id || '')}/restore`;
    const url = path + api.queryString(req, [`id`]);
    return api.post(url, undefined);
  }
  
  // Delete a backup
  // Note that the backup are initially only marked for deletion.
  // Once all their dependent backup in the cloud are removed, the backup is removed.
  // Required permissions:
  // -  backup.backup.delete on the backup
  async DeleteBackup(req: arangodb_cloud_common_v1_IDOptions): Promise<void> {
    const path = `/api/backup/v1/backup/${encodeURIComponent(req.id || '')}`;
    const url = path + api.queryString(req, [`id`]);
    return api.delete(url, undefined);
  }
}
