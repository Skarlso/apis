//
// This file is AUTO-GENERATED by protoc-gen-ts.
// Do not modify it manually.
///

import api from './api'
import * as googleTypes from './googleTypes'

// File: resourcemanager/v1/resourcemanager.proto
// Package: arangodb.cloud.resourcemanager.v1
export namespace arangodb {
  export namespace cloud {
    export namespace resourcemanager {
      export namespace v1 {
        // An Event represents something that happened to an organization
        // in the ArangoDB Managed service.
        export interface Event {
          // System identifier of the event.
          // This is a read-only value.
          // string
          id: string;
          
          // URL of this resource
          // This is a read-only value and cannot be initialized.
          // string
          url: string;
          
          // Identifier of the organization that owns this event.
          // This is a read-only value.
          // string
          organization_id: string;
          
          // Identifier of the subject of this event.
          // This is a read-only value.
          // If the subject of this event is an organization,
          // this value is a duplicate of organization_id.
          // string
          subject_id: string;
          
          // Type of the event.
          // string
          type: string;
          
          // Payload of the event.
          // The fields used in the payload are specific
          // to the type of event.
          // Event_PayloadEntry
          payload: arangodb.cloud.resourcemanager.v1.Event_PayloadEntry[];
          
          // The creation timestamp of the event
          // googleTypes.Timestamp
          created_at: googleTypes.Timestamp;
          
          // URL of the subject of this event.
          // This is a read-only value.
          // string
          subject_url: string;
        }
        export interface Event_PayloadEntry {
          // string
          key: string;
          
          // string
          value: string;
        }
        
        // List of Events.
        export interface EventList {
          // Event
          items: arangodb.cloud.resourcemanager.v1.Event[];
        }
        
        // Request arguments for IsMemberOfOrganization.
        export interface IsMemberOfOrganizationRequest {
          // Identifier of the user
          // string
          user_id: string;
          
          // Identifier of the organization
          // string
          organization_id: string;
        }
        
        // Response for IsMemberOfOrganization.
        export interface IsMemberOfOrganizationResponse {
          // Set if the requested user is a member of the requested organization.
          // boolean
          member: boolean;
          
          // Set if the requested user is an owner of the requested organization.
          // boolean
          owner: boolean;
        }
        
        // Options for ListEvents
        export interface ListEventOptions {
          // Standard list options
          // arangodb.cloud.common.v1.ListOptions
          options: arangodb.cloud.common.v1.ListOptions;
          
          // If set, filter on the subject_id of event
          // string
          subject_ids: string[];
          
          // If set, filter on the type of event
          // string
          types: string[];
          
          // If set, filter of events created after this timestamp
          // googleTypes.Timestamp
          created_after: googleTypes.Timestamp;
          
          // If set, filter of events created before this timestamp
          // googleTypes.Timestamp
          created_before: googleTypes.Timestamp;
        }
        
        // Member of an organization.
        // A member is always a user.
        export interface Member {
          // Identifier of the user
          // string
          user_id: string;
          
          // Set if this user is owner of the organization
          // boolean
          owner: boolean;
        }
        
        // List of Members.
        export interface MemberList {
          // Member
          items: arangodb.cloud.resourcemanager.v1.Member[];
        }
        
        // An Organization is represents a real world organization such as a company.
        export interface Organization {
          // System identifier of the organization.
          // This is a read-only value.
          // string
          id: string;
          
          // URL of this resource
          // This is a read-only value and cannot be initialized.
          // string
          url: string;
          
          // Name of the organization
          // string
          name: string;
          
          // Description of the organization
          // string
          description: string;
          
          // Set when this organization is deleted.
          // This is a read-only value.
          // boolean
          is_deleted: boolean;
          
          // The creation timestamp of the organization
          // googleTypes.Timestamp
          created_at: googleTypes.Timestamp;
          
          // The deletion timestamp of the organization
          // googleTypes.Timestamp
          deleted_at: googleTypes.Timestamp;
        }
        
        // An OrganizationInvite represents an invite for a human to join an
        // organization.
        export interface OrganizationInvite {
          // System identifier of the invite.
          // This is a read-only value.
          // string
          id: string;
          
          // URL of this resource
          // This is a read-only value and cannot be initialized.
          // string
          url: string;
          
          // Identifier of the organization that the human is invited to join.
          // This is a read-only value.
          // string
          organization_id: string;
          
          // Email address of the human who is invited.
          // string
          email: string;
          
          // If set, the invitee accepted the invite.
          // This is a read-only value.
          // boolean
          accepted: boolean;
          
          // If set, the invitee rejected the invite.
          // This is a read-only value.
          // boolean
          rejected: boolean;
          
          // The creation timestamp of the invite
          // This is a read-only value.
          // googleTypes.Timestamp
          created_at: googleTypes.Timestamp;
          
          // The acceptance timestamp of the invite
          // This is a read-only value.
          // googleTypes.Timestamp
          accepted_at: googleTypes.Timestamp;
          
          // The rejection timestamp of the invite
          // This is a read-only value.
          // googleTypes.Timestamp
          rejected_at: googleTypes.Timestamp;
          
          // Identifier of the user that accepted or rejected this invite.
          // This is a read-only value.
          // string
          user_id: string;
          
          // Identifier of the user that created this invite.
          // string
          created_by_id: string;
        }
        
        // List of OrganizationInvites.
        export interface OrganizationInviteList {
          // OrganizationInvite
          items: arangodb.cloud.resourcemanager.v1.OrganizationInvite[];
        }
        
        // List of organizations.
        export interface OrganizationList {
          // Organization
          items: arangodb.cloud.resourcemanager.v1.Organization[];
        }
        
        // Request arguments for Add/DeleteOrganizationMembers.
        export interface OrganizationMembersRequest {
          // Identifier of the organization to add/remove a user from
          // string
          organization_id: string;
          
          // Users to add/remove.
          // For every user, an owner flag is provided as well.
          // If you add an existing user, the owner flag or the add request
          // will overwrite the value of the existing owner flag.
          // MemberList
          members: arangodb.cloud.resourcemanager.v1.MemberList;
        }
        
        // A Project is represents a unit within an organization such as a department.
        export interface Project {
          // System identifier of the project.
          // This is a read-only value.
          // It can be set when creating the project.
          // string
          id: string;
          
          // URL of this resource
          // This is a read-only value and cannot be initialized.
          // string
          url: string;
          
          // Name of the project
          // string
          name: string;
          
          // Description of the project
          // string
          description: string;
          
          // Identifier of the organization that owns this project.
          // This is a read-only value.
          // string
          organization_id: string;
          
          // Set when this project is deleted
          // boolean
          is_deleted: boolean;
          
          // The creation timestamp of the project
          // googleTypes.Timestamp
          created_at: googleTypes.Timestamp;
          
          // The deletion timestamp of the project
          // googleTypes.Timestamp
          deleted_at: googleTypes.Timestamp;
        }
        
        // List of Projects.
        export interface ProjectList {
          // Project
          items: arangodb.cloud.resourcemanager.v1.Project[];
        }
        
        // ResourceManagerService is the API used to configure basic resource objects.
        export class ResourceManagerService {
          // Fetch all organizations that the authenticated user is a member of.
          // Required permissions:
          // - None
          async ListOrganizations(req: arangodb.cloud.common.v1.ListOptions): Promise<arangodb.cloud.resourcemanager.v1.OrganizationList> {
            const path = `/api/resourcemanager/v1/self/organizations`;
            const url = path + api.queryString(req, []);
            return api.get(url, undefined);
          }
          
          // Fetch an organization by its id.
          // The authenticated user must be a member of the organization.
          // Required permissions:
          // - None
          async GetOrganization(req: arangodb.cloud.common.v1.IDOptions): Promise<arangodb.cloud.resourcemanager.v1.Organization> {
            const path = `/api/resourcemanager/v1/organizations/${req.id}`;
            const url = path + api.queryString(req, [`id`]);
            return api.get(url, undefined);
          }
          
          // Create a new organization
          // Required permissions:
          // - None
          async CreateOrganization(req: arangodb.cloud.resourcemanager.v1.Organization): Promise<arangodb.cloud.resourcemanager.v1.Organization> {
            const path = `/api/resourcemanager/v1/organizations`;
            const url = path + api.queryString(req, []);
            return api.post(url, req);
          }
          
          // Update an organization
          // Required permissions:
          // - resourcemanager.organization.update on the organization
          async UpdateOrganization(req: arangodb.cloud.resourcemanager.v1.Organization): Promise<arangodb.cloud.resourcemanager.v1.Organization> {
            const path = `/api/resourcemanager/v1/organizations/${req.id}`;
            const url = path + api.queryString(req, [`id`]);
            return api.patch(url, req);
          }
          
          // Delete an organization
          // Note that organization are never really removed.
          // Instead their is_deleted field is set to true.
          // Required permissions:
          // - resourcemanager.organization.delete on the organization
          async DeleteOrganization(req: arangodb.cloud.resourcemanager.v1.Organization): Promise<void> {
            const path = `/api/resourcemanager/v1/organizations/${req.id}`;
            const url = path + api.queryString(req, [`id`]);
            return api.delete(url, undefined);
          }
          
          // Get a list of members of the organization identified by the given context ID.
          // Required permissions:
          // - resourcemanager.organization.get on the organization
          async ListOrganizationMembers(req: arangodb.cloud.common.v1.ListOptions): Promise<arangodb.cloud.resourcemanager.v1.MemberList> {
            const path = `/api/resourcemanager/v1/organizations/${req.context_id}/members`;
            const url = path + api.queryString(req, [`context_id`]);
            return api.get(url, undefined);
          }
          
          // Add one or more members to an organization.
          // Required permissions:
          // - resourcemanager.organization.update on the organization
          async AddOrganizationMembers(req: arangodb.cloud.resourcemanager.v1.OrganizationMembersRequest): Promise<void> {
            const path = `/api/resourcemanager/v1/organizations/${req.organization_id}/members`;
            const url = path + api.queryString(req, [`organization_id`]);
            return api.post(url, req);
          }
          
          // Remove one or more members from an organization.
          // Required permissions:
          // - resourcemanager.organization.update on the organization
          async DeleteOrganizationMembers(req: arangodb.cloud.resourcemanager.v1.OrganizationMembersRequest): Promise<void> {
            const path = `/api/resourcemanager/v1/organizations/${req.organization_id}/members`;
            const url = path + api.queryString(req, [`organization_id`]);
            return api.delete(url, req);
          }
          
          // Is the user identified by the given user ID a member
          // of the organization identified by the given organization ID.
          // Required permissions:
          // - resourcemanager.organization.get on the organization, unless the requested user is identical to the authenticated user.
          // Note that if the identified user or organization does not exist, no is returned.
          async IsMemberOfOrganization(req: arangodb.cloud.resourcemanager.v1.IsMemberOfOrganizationRequest): Promise<arangodb.cloud.resourcemanager.v1.IsMemberOfOrganizationResponse> {
            const path = `/api/resourcemanager/v1/organizations/${req.organization_id}/members/${req.user_id}`;
            const url = path + api.queryString(req, [`organization_id`, `user_id`]);
            return api.get(url, undefined);
          }
          
          // Fetch all projects in the organization identified by the given context ID.
          // The authenticated user must be a member of the organization identifier by the given context ID.
          // Required permissions:
          // - resourcemanager.project.list on the organization identified by the given context ID
          async ListProjects(req: arangodb.cloud.common.v1.ListOptions): Promise<arangodb.cloud.resourcemanager.v1.ProjectList> {
            const path = `/api/resourcemanager/v1/organizations/${req.context_id}/projects`;
            const url = path + api.queryString(req, [`context_id`]);
            return api.get(url, undefined);
          }
          
          // Fetch a project by its id.
          // The authenticated user must be a member of the organization that owns the project.
          // Required permissions:
          // - resourcemanager.project.get on the project identified by the given ID
          async GetProject(req: arangodb.cloud.common.v1.IDOptions): Promise<arangodb.cloud.resourcemanager.v1.Project> {
            const path = `/api/resourcemanager/v1/projects/${req.id}`;
            const url = path + api.queryString(req, [`id`]);
            return api.get(url, undefined);
          }
          
          // Create a new project
          // The authenticated user must be a member of the organization that owns the project.
          // Required permissions:
          // - resourcemanager.project.create on the organization that owns the project
          async CreateProject(req: arangodb.cloud.resourcemanager.v1.Project): Promise<arangodb.cloud.resourcemanager.v1.Project> {
            const path = `/api/resourcemanager/v1/organizations/${req.organization_id}/projects`;
            const url = path + api.queryString(req, [`organization_id`]);
            return api.post(url, req);
          }
          
          // Update a project
          // The authenticated user must be a member of the organization that owns the project.
          // Required permissions:
          // - resourcemanager.project.update on the project
          async UpdateProject(req: arangodb.cloud.resourcemanager.v1.Project): Promise<arangodb.cloud.resourcemanager.v1.Project> {
            const path = `/api/resourcemanager/v1/projects/${req.id}`;
            const url = path + api.queryString(req, [`id`]);
            return api.patch(url, req);
          }
          
          // Delete a project
          // Note that project are initially only marked for deleted.
          // Once all their resources are removed the project itself is deleted
          // and cannot be restored.
          // The authenticated user must be a member of the organization that owns the project.
          // Required permissions:
          // - resourcemanager.project.delete on the project
          async DeleteProject(req: arangodb.cloud.resourcemanager.v1.Project): Promise<void> {
            const path = `/api/resourcemanager/v1/projects/${req.id}`;
            const url = path + api.queryString(req, [`id`]);
            return api.delete(url, undefined);
          }
          
          // Fetch all events in the organization identified by the given context ID.
          // The authenticated user must be a member of the organization identifier by the given context ID.
          // Required permissions:
          // - resourcemanager.event.list on the organization identified by the given context ID
          async ListEvents(req: arangodb.cloud.resourcemanager.v1.ListEventOptions): Promise<arangodb.cloud.resourcemanager.v1.EventList> {
            const path = `/api/resourcemanager/v1/organizations/${req.options.context_id}/events`;
            const url = path + api.queryString(req, [`options.context_id`]);
            return api.get(url, undefined);
          }
          
          // Fetch all organization invites in the organization identified by the given context ID.
          // The authenticated user must be a member of the organization identifier by the given context ID.
          // Required permissions:
          // - resourcemanager.organization-invite.list on the invite.
          async ListOrganizationInvites(req: arangodb.cloud.common.v1.ListOptions): Promise<arangodb.cloud.resourcemanager.v1.OrganizationInviteList> {
            const path = `/api/resourcemanager/v1/organizations/${req.context_id}/organization-invites`;
            const url = path + api.queryString(req, [`context_id`]);
            return api.get(url, undefined);
          }
          
          // Fetch all organization invites for the email address of the authenticated user.
          // Required permissions:
          // - None
          async ListMyOrganizationInvites(req: arangodb.cloud.common.v1.ListOptions): Promise<arangodb.cloud.resourcemanager.v1.OrganizationInviteList> {
            const path = `/api/resourcemanager/v1/self/organization-invites`;
            const url = path + api.queryString(req, []);
            return api.get(url, undefined);
          }
          
          // Fetch an organization invite by its id.
          // The authenticated user must be a member of the organization that the invite is for.
          // Required permissions:
          // - resourcemanager.organization-invite.get on the invite.
          async GetOrganizationInvite(req: arangodb.cloud.common.v1.IDOptions): Promise<arangodb.cloud.resourcemanager.v1.OrganizationInvite> {
            const path = `/api/resourcemanager/v1/organization-invites/${req.id}`;
            const url = path + api.queryString(req, [`id`]);
            return api.get(url, undefined);
          }
          
          // Create a new organization invite.
          // The authenticated user must be a member of the organization that the invite is for.
          // Required permissions:
          // - resourcemanager.organization-invite.create on the organization that the invite is for.
          async CreateOrganizationInvite(req: arangodb.cloud.resourcemanager.v1.OrganizationInvite): Promise<arangodb.cloud.resourcemanager.v1.OrganizationInvite> {
            const path = `/api/resourcemanager/v1/organizations/${req.organization_id}/organization-invites`;
            const url = path + api.queryString(req, [`organization_id`]);
            return api.post(url, req);
          }
          
          // Delete an organization invite
          // The authenticated user must be a member of the organization that the invite is for.
          // Required permissions:
          // - resourcemanager.organization-invite.delete on the invite
          async DeleteOrganizationInvite(req: arangodb.cloud.resourcemanager.v1.OrganizationInvite): Promise<void> {
            const path = `/api/resourcemanager/v1/organization-invites/${req.id}`;
            const url = path + api.queryString(req, [`id`]);
            return api.delete(url, undefined);
          }
          
          // Accept an organization invite
          // The authenticated user's email address must match the email address specified in
          // the invite.
          // Required permissions:
          // - None
          async AcceptOrganizationInvite(req: arangodb.cloud.resourcemanager.v1.OrganizationInvite): Promise<void> {
            const path = `/api/resourcemanager/v1/organization-invites/${req.id}/accept`;
            const url = path + api.queryString(req, [`id`]);
            return api.post(url, undefined);
          }
          
          // Reject an organization invite
          // The authenticated user's email address must match the email address specified in
          // the invite.
          // Required permissions:
          // - None
          async RejectOrganizationInvite(req: arangodb.cloud.resourcemanager.v1.OrganizationInvite): Promise<void> {
            const path = `/api/resourcemanager/v1/organization-invites/${req.id}/reject`;
            const url = path + api.queryString(req, [`id`]);
            return api.post(url, undefined);
          }
        }
      }
    }
  }
}

// File: crypto/v1/crypto.proto
// Package: arangodb.cloud.crypto.v1
export namespace arangodb {
  export namespace cloud {
    export namespace crypto {
      export namespace v1 {
        // A CACertificate is represents a self-signed certificate authority used to sign
        // TLS certificates for deployments & client authentication.
        export interface CACertificate {
          // System identifier of the CA certificate.
          // This is a read-only value.
          // string
          id: string;
          
          // URL of this resource
          // This is a read-only value.
          // string
          url: string;
          
          // Name of the CA certificate
          // string
          name: string;
          
          // Description of the CA certificate
          // string
          description: string;
          
          // Identifier of the project that owns this CA certificate.
          // This value cannot be changed after creation.
          // string
          project_id: string;
          
          // Time from creation of the CA certificate to expiration.
          // This value cannot be changed after creation.
          // google.protobuf.Duration
          lifetime: google.protobuf.Duration;
          
          // The creation timestamp of the CA certificate
          // This is a read-only value.
          // googleTypes.Timestamp
          created_at: googleTypes.Timestamp;
          
          // The deletion timestamp of the CA certificate
          // This is a read-only value.
          // googleTypes.Timestamp
          deleted_at: googleTypes.Timestamp;
          
          // The expiration timestamp of the CA certificate
          // This is a read-only value.
          // googleTypes.Timestamp
          expires_at: googleTypes.Timestamp;
          
          // A PEM encoded representation of the public key of the CA certificate.
          // This is a read-only value.
          // string
          certificate_pem: string;
          
          // Set when this CA certificate is deleted.
          // This is a read-only value.
          // boolean
          is_deleted: boolean;
        }
        
        // List of CACertificates.
        export interface CACertificateList {
          // CACertificate
          items: arangodb.cloud.crypto.v1.CACertificate[];
        }
        
        // CryptoService is the API used to configure various crypto objects.
        export class CryptoService {
          // Fetch all CA certificates in the project identified by the given context ID.
          // Required permissions:
          // - crypto.cacertificate.list on the project identified by the given context ID
          async ListCACertificates(req: arangodb.cloud.common.v1.ListOptions): Promise<arangodb.cloud.crypto.v1.CACertificateList> {
            const path = `/api/crypto/v1/projects/${req.context_id}/cacertificates`;
            const url = path + api.queryString(req, [`context_id`]);
            return api.get(url, undefined);
          }
          
          // Fetch a CA certificate by its id.
          // Required permissions:
          // - crypto.cacertificate.get on the CA certificate identified by the given ID
          async GetCACertificate(req: arangodb.cloud.common.v1.IDOptions): Promise<arangodb.cloud.crypto.v1.CACertificate> {
            const path = `/api/crypto/v1/cacertificates/${req.id}`;
            const url = path + api.queryString(req, [`id`]);
            return api.get(url, undefined);
          }
          
          // Create a new CA certificate
          // Required permissions:
          // - crypto.cacertificate.create on the project that owns the CA certificate
          async CreateCACertificate(req: arangodb.cloud.crypto.v1.CACertificate): Promise<arangodb.cloud.crypto.v1.CACertificate> {
            const path = `/api/crypto/v1/projects/${req.project_id}/cacertificates`;
            const url = path + api.queryString(req, [`project_id`]);
            return api.post(url, req);
          }
          
          // Update a CA certificate
          // Required permissions:
          // - crypto.cacertificate.update on the CA certificate
          async UpdateCACertificate(req: arangodb.cloud.crypto.v1.CACertificate): Promise<arangodb.cloud.crypto.v1.CACertificate> {
            const path = `/api/crypto/v1/cacertificates/${req.id}`;
            const url = path + api.queryString(req, [`id`]);
            return api.patch(url, req);
          }
          
          // Delete a CA certificate
          // Note that CA certificate are initially only marked for deleted.
          // Once all the resources that depend on it are removed the CA certificate itself is deleted
          // and cannot be restored.
          // Required permissions:
          // - crypto.cacertificate.delete on the CA certificate
          async DeleteCACertificate(req: arangodb.cloud.crypto.v1.CACertificate): Promise<void> {
            const path = `/api/crypto/v1/cacertificates/${req.id}`;
            const url = path + api.queryString(req, [`id`]);
            return api.delete(url, undefined);
          }
        }
      }
    }
  }
}

// File: platform/v1/platform.proto
// Package: arangodb.cloud.platform.v1
export namespace arangodb {
  export namespace cloud {
    export namespace platform {
      export namespace v1 {
        // Provider represents a specific cloud provider such as AWS or GCP.
        export interface Provider {
          // System identifier of the provider.
          // string
          id: string;
          
          // Name of the provider
          // string
          name: string;
        }
        
        // List of providers.
        export interface ProviderList {
          // Provider
          items: arangodb.cloud.platform.v1.Provider[];
        }
        
        // Region represents a geographical region in which deployments are run.
        export interface Region {
          // System identifier of the region.
          // string
          id: string;
          
          // Identifier of the provider that hosts this region.
          // string
          provider_id: string;
          
          // Location of the region
          // string
          location: string;
          
          // Is this region available for creating new deployments?
          // boolean
          available: boolean;
        }
        
        // List of regions.
        export interface RegionList {
          // Region
          items: arangodb.cloud.platform.v1.Region[];
        }
        
        // PlatformService is the API used to query for cloud provider & regional info.
        export class PlatformService {
          // Fetch all providers that are supported by the ArangoDB cloud.
          // Required permissions:
          // - None
          async ListProviders(req: arangodb.cloud.common.v1.ListOptions): Promise<arangodb.cloud.platform.v1.ProviderList> {
            const path = `/api/platform/v1/providers`;
            const url = path + api.queryString(req, []);
            return api.get(url, undefined);
          }
          
          // Fetch a provider by its id.
          // Required permissions:
          // - None
          async GetProvider(req: arangodb.cloud.common.v1.IDOptions): Promise<arangodb.cloud.platform.v1.Provider> {
            const path = `/api/platform/v1/providers/${req.id}`;
            const url = path + api.queryString(req, [`id`]);
            return api.get(url, undefined);
          }
          
          // Fetch all regions provided by the provided identified by the given context ID.
          // Required permissions:
          // - None
          async ListRegions(req: arangodb.cloud.common.v1.ListOptions): Promise<arangodb.cloud.platform.v1.RegionList> {
            const path = `/api/platform/v1/providers/${req.context_id}/regions`;
            const url = path + api.queryString(req, [`context_id`]);
            return api.get(url, undefined);
          }
          
          // Fetch a region by its id.
          // Required permissions:
          // - None
          async GetRegion(req: arangodb.cloud.common.v1.IDOptions): Promise<arangodb.cloud.platform.v1.Region> {
            const path = `/api/platform/v1/regions/${req.id}`;
            const url = path + api.queryString(req, [`id`]);
            return api.get(url, undefined);
          }
        }
      }
    }
  }
}

// File: common/v1/common.proto
// Package: arangodb.cloud.common.v1
export namespace arangodb {
  export namespace cloud {
    export namespace common {
      export namespace v1 {
        // Empty message
        export interface Empty {
        }
        
        // Options for a get-by-id request
        export interface IDOptions {
          // System identifier of the object to fetch.
          // string
          id: string;
        }
        
        // Options for a list request.
        export interface ListOptions {
          // Maximum number of items to return.
          // If not specified, all remaining items are returned.
          // number
          page_size: number;
          
          // Page to start with (defaults to 0).
          // number
          page: number;
          
          // Identifier of the resource in which the list request is made.
          // string
          context_id: string;
        }
        
        // Options for a get-by-url request
        export interface URLOptions {
          // URL of the resource to fetch.
          // string
          url: string;
        }
        
        // Response for single boolean.
        export interface YesOrNo {
          // boolean
          result: boolean;
        }
      }
    }
  }
}

// File: iam/v1/iam.proto
// Package: arangodb.cloud.iam.v1
export namespace arangodb {
  export namespace cloud {
    export namespace iam {
      export namespace v1 {
        // Group of user accounts.
        export interface Group {
          // System identifier of the group.
          // This is a read-only value.
          // string
          id: string;
          
          // Identifier of the organization that owns this group.
          // string
          organization_id: string;
          
          // Name of the group
          // string
          name: string;
          
          // Description of the group
          // string
          description: string;
          
          // The creation timestamp of the group
          // googleTypes.Timestamp
          created_at: googleTypes.Timestamp;
          
          // The deletion timestamp of the group
          // googleTypes.Timestamp
          deleted_at: googleTypes.Timestamp;
          
          // Set when this organization is deleted.
          // This is a read-only value.
          // boolean
          is_deleted: boolean;
          
          // URL of this resource
          // This is a read-only value and cannot be initialized.
          // string
          url: string;
          
          // Set if this group is virtual and managed by the system.
          // This is a read-only value.
          // boolean
          is_virtual: boolean;
        }
        
        // List of groups.
        export interface GroupList {
          // Group
          items: arangodb.cloud.iam.v1.Group[];
        }
        
        // List of group members (user ID's)
        export interface GroupMemberList {
          // List of ID's of users that are member of the group.
          // string
          items: string[];
        }
        
        // Request arguments for Add/DeleteGroupMembers.
        export interface GroupMembersRequest {
          // ID of the group to add/remove members to/from.
          // string
          group_id: string;
          
          // ID's of users to add/remove to/from the group.
          // string
          user_ids: string[];
        }
        
        // Request arguments for HasPermissionsRequest.
        export interface HasPermissionsRequest {
          // URL of the resource to query permissions for.
          // string
          url: string;
          
          // The list of permissions that are required.
          // string
          permissions: string[];
        }
        
        // Request arguments for IsMemberOfGroup.
        export interface IsMemberOfGroupRequest {
          // Identifier of the user
          // string
          user_id: string;
          
          // Identifier of the group
          // string
          group_id: string;
        }
        
        // List of permissions.
        export interface PermissionList {
          // string
          items: string[];
        }
        
        // Policy bindings members to roles for access to a resource.
        export interface Policy {
          // URL of the resource to which this policy applies.
          // string
          resource_url: string;
          
          // Role bindings to apply to the resource.
          // RoleBinding
          bindings: arangodb.cloud.iam.v1.RoleBinding[];
        }
        
        // A role is a list of permissions.
        // Roles can be bound to resources for members.
        export interface Role {
          // System identifier of the role.
          // This is a read-only value.
          // string
          id: string;
          
          // Identifier of the organization that owns this role.
          // This value is undefined for predefined roles.
          // string
          organization_id: string;
          
          // Name of the role
          // string
          name: string;
          
          // Description of the role
          // string
          description: string;
          
          // Permissions to grant when this role is bound.
          // string
          permissions: string[];
          
          // Set if this role is predefined.
          // This is a read-only value.
          // boolean
          is_predefined: boolean;
          
          // The creation timestamp of the role
          // googleTypes.Timestamp
          created_at: googleTypes.Timestamp;
          
          // The deletion timestamp of the role
          // googleTypes.Timestamp
          deleted_at: googleTypes.Timestamp;
          
          // Set when this organization is deleted.
          // This is a read-only value.
          // boolean
          is_deleted: boolean;
          
          // URL of this resource
          // This is a read-only value and cannot be initialized.
          // string
          url: string;
        }
        
        // RoleBinding binds a Role to a member.
        export interface RoleBinding {
          // System identifier of the role-binding.
          // This is a read-only value.
          // string
          id: string;
          
          // Identifier of the member to bind a role to.
          // Member ID is formatted as:
          // - user:<user_id>
          // - group:<group_id>
          // string
          member_id: string;
          
          // Identifier of the Role to grant to member
          // string
          role_id: string;
        }
        
        // Request arguments for Add/DeleteRoleBindings.
        export interface RoleBindingsRequest {
          // URL of the resource to add/remove policy binding to/from.
          // string
          resource_url: string;
          
          // Role bindings to add/remove to the policy.
          // RoleBinding
          bindings: arangodb.cloud.iam.v1.RoleBinding[];
        }
        
        // List of roles.
        export interface RoleList {
          // Role
          items: arangodb.cloud.iam.v1.Role[];
        }
        
        // User represents an actual person.
        export interface User {
          // Identifier of the user.
          // This is a read-only value.
          // string
          id: string;
          
          // Primary email address of the user.
          // All emails send to this user will use this address.
          // string
          email: string;
          
          // Name of the user.
          // This may be empty if not filled out by the user.
          // string
          name: string;
          
          // Given name of the user.
          // This may be empty if not filled out by the user.
          // string
          given_name: string;
          
          // Family name of the user.
          // This may be empty if not filled out by the user.
          // string
          family_name: string;
          
          // The creation timestamp of the user.
          // googleTypes.Timestamp
          created_at: googleTypes.Timestamp;
          
          // Additional email addresses of the user.
          // This will be filled in when the authentication provided
          // knows multiple email addresses for the user.
          // string
          additional_emails: string[];
        }
        
        // IAMService is the API used to configure IAM objects.
        export class IAMService {
          // Fetch all available information of the currently authenticated user.
          // Required permissions:
          // - None
          async GetThisUser(req?: arangodb.cloud.common.v1.Empty): Promise<arangodb.cloud.iam.v1.User> {
            const path = `/api/iam/v1/self/user`;
            const url = path + api.queryString(req, []);
            return api.get(url, undefined);
          }
          
          // Fetch all available information of the user identified by the given ID.
          // Required permissions:
          // - resourcemanager.organization.get on one of the organizations that the request user and authenticated user are both a member of
          async GetUser(req: arangodb.cloud.common.v1.IDOptions): Promise<arangodb.cloud.iam.v1.User> {
            const path = `/api/iam/v1/users/${req.id}`;
            const url = path + api.queryString(req, [`id`]);
            return api.get(url, undefined);
          }
          
          // Fetch all groups of the organization identified by the given context ID.
          // Required permissions:
          // - iam.group.list on organization identified by given context ID.
          async ListGroups(req: arangodb.cloud.common.v1.ListOptions): Promise<arangodb.cloud.iam.v1.GroupList> {
            const path = `/api/iam/v1/organizations/${req.context_id}/groups`;
            const url = path + api.queryString(req, [`context_id`]);
            return api.get(url, undefined);
          }
          
          // Fetch a group by its id.
          // Required permissions:
          // - iam.group.get on organization that owns the group
          async GetGroup(req: arangodb.cloud.common.v1.IDOptions): Promise<arangodb.cloud.iam.v1.Group> {
            const path = `/api/iam/v1/groups/${req.id}`;
            const url = path + api.queryString(req, [`id`]);
            return api.get(url, undefined);
          }
          
          // Create a group
          // Required permissions:
          // - iam.group.create on organization that owns the group
          async CreateGroup(req: arangodb.cloud.iam.v1.Group): Promise<arangodb.cloud.iam.v1.Group> {
            const path = `/api/iam/v1/organizations/${req.organization_id}/groups`;
            const url = path + api.queryString(req, [`organization_id`]);
            return api.post(url, req);
          }
          
          // Update a group
          // Required permissions:
          // - iam.group.update on organization that owns the group
          async UpdateGroup(req: arangodb.cloud.iam.v1.Group): Promise<arangodb.cloud.iam.v1.Group> {
            const path = `/api/iam/v1/groups/${req.id}`;
            const url = path + api.queryString(req, [`id`]);
            return api.patch(url, req);
          }
          
          // Delete a group
          // Required permissions:
          // - iam.group.delete on organization that owns the group
          async DeleteGroup(req: arangodb.cloud.iam.v1.Group): Promise<void> {
            const path = `/api/iam/v1/groups/${req.id}`;
            const url = path + api.queryString(req, [`id`]);
            return api.delete(url, undefined);
          }
          
          // List of members of the group identified by the given context ID.
          // Required permissions:
          // - iam.group.get on organization that owns the group
          async ListGroupMembers(req: arangodb.cloud.common.v1.ListOptions): Promise<arangodb.cloud.iam.v1.GroupMemberList> {
            const path = `/api/iam/v1/groups/${req.context_id}/members`;
            const url = path + api.queryString(req, [`context_id`]);
            return api.get(url, undefined);
          }
          
          // Add one or more members to the group identified by given ID.
          // Required permissions:
          // - iam.group.update on organization that owns the group
          async AddGroupMembers(req: arangodb.cloud.iam.v1.GroupMembersRequest): Promise<arangodb.cloud.iam.v1.Group> {
            const path = `/api/iam/v1/groups/${req.group_id}/members`;
            const url = path + api.queryString(req, [`group_id`]);
            return api.post(url, req);
          }
          
          // Remove one or more members from the group identified by given ID.
          // Required permissions:
          // - iam.group.update on organization that owns the group
          async DeleteGroupMembers(req: arangodb.cloud.iam.v1.GroupMembersRequest): Promise<arangodb.cloud.iam.v1.Group> {
            const path = `/api/iam/v1/groups/${req.group_id}/members`;
            const url = path + api.queryString(req, [`group_id`]);
            return api.delete(url, req);
          }
          
          // Is the user identified by the given user ID a member of the group identified by the given group ID.
          // Required permissions:
          // - iam.group.get on organization that owns the group, unless the requested user is identical to the authenticated user.
          // Note that if the identified group does not exist, no is returned.
          async IsMemberOfGroup(req: arangodb.cloud.iam.v1.IsMemberOfGroupRequest): Promise<arangodb.cloud.common.v1.YesOrNo> {
            const path = `/api/iam/v1/groups/${req.group_id}/members/${req.user_id}`;
            const url = path + api.queryString(req, [`group_id`, `user_id`]);
            return api.get(url, undefined);
          }
          
          // Fetch all roles in the organization identified by the given context ID.
          // Required permissions:
          // - iam.role.list on organization identified by given context ID.
          async ListRoles(req: arangodb.cloud.common.v1.ListOptions): Promise<arangodb.cloud.iam.v1.RoleList> {
            const path = `/api/iam/v1/organizations/${req.context_id}/roles`;
            const url = path + api.queryString(req, [`context_id`]);
            return api.get(url, undefined);
          }
          
          // Fetch a role by its id.
          // Required permissions:
          // - iam.role.get on organization that owns the role
          async GetRole(req: arangodb.cloud.common.v1.IDOptions): Promise<arangodb.cloud.iam.v1.Role> {
            const path = `/api/iam/v1/roles/${req.id}`;
            const url = path + api.queryString(req, [`id`]);
            return api.get(url, undefined);
          }
          
          // Create a custom role
          // Required permissions:
          // - iam.role.create on organization that owns the role
          async CreateRole(req: arangodb.cloud.iam.v1.Role): Promise<arangodb.cloud.iam.v1.Role> {
            const path = `/api/iam/v1/organizations/${req.organization_id}/roles`;
            const url = path + api.queryString(req, [`organization_id`]);
            return api.post(url, req);
          }
          
          // Update a custom role
          // Required permissions:
          // - iam.role.update on organization that owns the role
          async UpdateRole(req: arangodb.cloud.iam.v1.Role): Promise<arangodb.cloud.iam.v1.Role> {
            const path = `/api/iam/v1/roles/${req.id}`;
            const url = path + api.queryString(req, [`id`]);
            return api.patch(url, req);
          }
          
          // Delete a custom role
          // Required permissions:
          // - iam.role.delete on organization that owns the role
          async DeleteRole(req: arangodb.cloud.iam.v1.Role): Promise<void> {
            const path = `/api/iam/v1/roles/${req.id}`;
            const url = path + api.queryString(req, [`id`]);
            return api.delete(url, req);
          }
          
          // Get the policy for a resource identified by given URL.
          // Required permissions:
          // - iam.policy.get on resource identified by the url
          async GetPolicy(req: arangodb.cloud.common.v1.URLOptions): Promise<arangodb.cloud.iam.v1.Policy> {
            const path = `/api/iam/v1/policies`;
            const url = path + api.queryString(req, []);
            return api.get(url, undefined);
          }
          
          // Add one or more RoleBindings to the policy of a resource identified by given URL.
          // Required permissions:
          // - iam.policy.update on resource identified by the url
          async AddRoleBindings(req: arangodb.cloud.iam.v1.RoleBindingsRequest): Promise<arangodb.cloud.iam.v1.Policy> {
            const path = `/api/iam/v1/policies/bindings`;
            const url = path + api.queryString(req, []);
            return api.post(url, req);
          }
          
          // Remove one or more RoleBindings from the policy of a resource identified by given URL.
          // Required permissions:
          // - iam.policy.update on resource identified by the url
          async DeleteRoleBindings(req: arangodb.cloud.iam.v1.RoleBindingsRequest): Promise<arangodb.cloud.iam.v1.Policy> {
            const path = `/api/iam/v1/policies/bindings`;
            const url = path + api.queryString(req, []);
            return api.delete(url, req);
          }
          
          // Return the list of permissions that are available to the currently authenticated
          // used for actions on the resource identified by the given URL.
          // Required permissions:
          // - None
          async GetEffectivePermissions(req: arangodb.cloud.common.v1.URLOptions): Promise<arangodb.cloud.iam.v1.PermissionList> {
            const path = `/api/iam/v1/policies/effective-permissions`;
            const url = path + api.queryString(req, []);
            return api.get(url, undefined);
          }
          
          // Does the authenticated user have all of the requested permissions for the resource
          // identified by the given URL?
          // Required permissions:
          // - None
          async HasPermissions(req: arangodb.cloud.iam.v1.HasPermissionsRequest): Promise<arangodb.cloud.common.v1.YesOrNo> {
            const path = `/api/iam/v1/policies/permissions`;
            const url = path + api.queryString(req, []);
            return api.get(url, undefined);
          }
          
          // List all known permissions.
          // Required permissions:
          // - None
          async ListPermissions(req?: arangodb.cloud.common.v1.Empty): Promise<arangodb.cloud.iam.v1.PermissionList> {
            const path = `/api/iam/v1/permissions`;
            const url = path + api.queryString(req, []);
            return api.get(url, undefined);
          }
        }
      }
    }
  }
}

// File: data/v1/data.proto
// Package: arangodb.cloud.data.v1
export namespace arangodb {
  export namespace cloud {
    export namespace data {
      export namespace v1 {
        // A Deployment is represents one deployment of an ArangoDB cluster.
        export interface Deployment {
          // System identifier of the deployment.
          // This is a read-only value.
          // string
          id: string;
          
          // URL of this resource
          // This is a read-only value.
          // string
          url: string;
          
          // Name of the deployment
          // string
          name: string;
          
          // Description of the deployment
          // string
          description: string;
          
          // Identifier of the project that owns this deployment.
          // After creation, this value cannot be changed.
          // string
          project_id: string;
          
          // Identifier of the region in which the deployment is created.
          // After creation, this value cannot be changed.
          // string
          region_id: string;
          
          // The creation timestamp of the deployment
          // This is a read-only value.
          // googleTypes.Timestamp
          created_at: googleTypes.Timestamp;
          
          // The deletion timestamp of the deployment
          // This is a read-only value.
          // googleTypes.Timestamp
          deleted_at: googleTypes.Timestamp;
          
          // Set when this deployment is deleted.
          // This is a read-only value.
          // boolean
          is_deleted: boolean;
          
          // ArangoDB version to use for this deployment.
          // See Version.version.
          // If you change this value to a higher version,
          // the deployment will be upgraded.
          // If you change this value to a lower patch value,
          // the deployment will be downgraded.
          // Any attempt to change to a lower minor or major version
          // is considered an invalid request.
          // Any attempt to change to a version that is not in the
          // list of available versions is considered an invalid request.
          // string
          version: string;
          
          // Deployment_CertificateSpec
          certificates: arangodb.cloud.data.v1.Deployment_CertificateSpec;
          
          // Deployment_ServersSpec
          servers: arangodb.cloud.data.v1.Deployment_ServersSpec;
          
          // Deployment_Status
          status: arangodb.cloud.data.v1.Deployment_Status;
        }
        export interface Deployment_CertificateSpec {
          // Identifier of the CACertificate used to sign TLS certificates for the deployment.
          // If this value is empty during creation of the deployment, a new CA certificate
          // will be created for this deployment.
          // If you change this value after the creation of the deployment a complete
          // rotation of the deployment is required, which will result in some downtime.
          // string
          ca_certificate_id: string;
          
          // Zero or more DNS names to include in the TLS certificate of the deployment.
          // string
          alternate_dns_names: string[];
        }
        export interface Deployment_ServersSpec {
          // Number of coordinators of the deployment
          // number
          coordinators: number;
          
          // Amount of memory (in GB) to allocate for coordinators.
          // number
          coordinator_memory_size: number;
          
          // Number of dbservers of the deployment
          // number
          dbservers: number;
          
          // Amount of memory (in GB) to allocate for dbservers.
          // number
          dbserver_memory_size: number;
          
          // Amount of disk space (in GB) to allocate for dbservers.
          // number
          dbserver_disk_size: number;
        }
        
        // Status of the deployment
        // All members of this field are read-only.
        export interface Deployment_Status {
          // Endpoint URL used to reach the deployment
          // This value will be empty during the creation of the deployment.
          // string
          endpoint: string;
          
          // Human readable description of the status of the deployment.
          // string
          description: string;
          
          // Set once the deployment has been created.
          // boolean
          created: boolean;
          
          // Set if the deployment is ready to be used.
          // If the deployment has downtime (e.g. because of changing a CA certificate)
          // this will go to false until the downtime is over.
          // boolean
          ready: boolean;
          
          // Set if the deployment is being upgraded.
          // boolean
          upgrading: boolean;
          
          // Versions of running servers
          // string
          server_versions: string[];
        }
        
        // List of Deployments.
        export interface DeploymentList {
          // Deployment
          items: arangodb.cloud.data.v1.Deployment[];
        }
        
        // Limits of allowed values for fields of Deployment.ServersSpec.
        export interface ServersSpecLimits {
          // Limits for the number of coordinators of the deployment
          // ServersSpecLimits_Limits
          coordinators: arangodb.cloud.data.v1.ServersSpecLimits_Limits;
          
          // Possible values for the amount of memory (in GB) to allocate
          // for coordinators.
          // ServersSpecLimits_Limits
          coordinator_memory_size: arangodb.cloud.data.v1.ServersSpecLimits_Limits;
          
          // Limits for the number of dbservers of the deployment
          // ServersSpecLimits_Limits
          dbservers: arangodb.cloud.data.v1.ServersSpecLimits_Limits;
          
          // Possible values for the amount of memory (in GB) to allocate
          // for dbservers.
          // ServersSpecLimits_Limits
          dbserver_memory_size: arangodb.cloud.data.v1.ServersSpecLimits_Limits;
          
          // Amount of disk space (in GB) to allocate for dbservers.
          // ServersSpecLimits_Limits
          dbserver_disk_size: arangodb.cloud.data.v1.ServersSpecLimits_Limits;
        }
        export interface ServersSpecLimits_Limits {
          // Minimum value
          // number
          min: number;
          
          // Maximum value
          // number
          max: number;
          
          // Set of allowed values.
          // If this field is non-empty, only one of these values
          // is allowed.
          // number
          allowed_values: number[];
        }
        
        // Request arguments for GetServersSpecLimits
        export interface ServersSpecLimitsRequest {
          // Identifier of project that will own a deployment.
          // string
          project_id: string;
          
          // Identifier of a region in which a deployment will be created.
          // string
          region_id: string;
        }
        
        // Version of an ArangoDB release
        export interface Version {
          // Version in the format of major.minor.patch
          // string
          version: string;
        }
        
        // List of Versions.
        export interface VersionList {
          // Version
          items: arangodb.cloud.data.v1.Version[];
        }
        
        // DataService is the API used to configure data objects.
        export class DataService {
          // Fetch all deployments in the project identified by the given context ID.
          // Required permissions:
          // - data.deployment.list on the project identified by the given context ID
          async ListDeployments(req: arangodb.cloud.common.v1.ListOptions): Promise<arangodb.cloud.data.v1.DeploymentList> {
            const path = `/api/data/v1/projects/${req.context_id}/deployments`;
            const url = path + api.queryString(req, [`context_id`]);
            return api.get(url, undefined);
          }
          
          // Fetch a deployment by its id.
          // Required permissions:
          // - data.deployment.get on the deployment identified by the given ID
          async GetDeployment(req: arangodb.cloud.common.v1.IDOptions): Promise<arangodb.cloud.data.v1.Deployment> {
            const path = `/api/data/v1/deployments/${req.id}`;
            const url = path + api.queryString(req, [`id`]);
            return api.get(url, undefined);
          }
          
          // Create a new deployment
          // Required permissions:
          // - data.deployment.create on the project that owns the deployment
          async CreateDeployment(req: arangodb.cloud.data.v1.Deployment): Promise<arangodb.cloud.data.v1.Deployment> {
            const path = `/api/data/v1/project/${req.project_id}/deployments`;
            const url = path + api.queryString(req, [`project_id`]);
            return api.post(url, req);
          }
          
          // Update a deployment
          // Required permissions:
          // - data.deployment.update on the deployment
          async UpdateDeployment(req: arangodb.cloud.data.v1.Deployment): Promise<arangodb.cloud.data.v1.Deployment> {
            const path = `/api/data/v1/deployments/${req.id}`;
            const url = path + api.queryString(req, [`id`]);
            return api.patch(url, req);
          }
          
          // Delete a deployment
          // Note that deployments are initially only marked for deletion.
          // Once all their resources are removed the deployment itself is removed.
          // Required permissions:
          // - data.deployment.delete on the deployment
          async DeleteDeployment(req: arangodb.cloud.data.v1.Deployment): Promise<void> {
            const path = `/api/data/v1/deployments/${req.id}`;
            const url = path + api.queryString(req, [`id`]);
            return api.delete(url, undefined);
          }
          
          // Fetch all ArangoDB versions that are available for deployments.
          // Required permissions:
          // - None
          async ListVersions(req: arangodb.cloud.common.v1.ListOptions): Promise<arangodb.cloud.data.v1.VersionList> {
            const path = `/api/data/v1/versions`;
            const url = path + api.queryString(req, []);
            return api.get(url, undefined);
          }
          
          // Fetch the default ArangoDB version for new deployment.
          // Required permissions:
          // - None
          async GetDefaultVersion(req?: arangodb.cloud.common.v1.Empty): Promise<arangodb.cloud.data.v1.Version> {
            const path = `/api/data/v1/versions/default`;
            const url = path + api.queryString(req, []);
            return api.get(url, undefined);
          }
          
          // Fetch the limits for server specifications for deployments
          // owned by the given projected, created in the given region.
          // Required permissions:
          // - data.limits.get on the requested project
          async GetServersSpecLimits(req: arangodb.cloud.data.v1.ServersSpecLimitsRequest): Promise<arangodb.cloud.data.v1.ServersSpecLimits> {
            const path = `/api/data/v1/projects/${req.project_id}/regions/${req.region_id}/limits`;
            const url = path + api.queryString(req, [`project_id`, `region_id`]);
            return api.get(url, undefined);
          }
        }
      }
    }
  }
}
