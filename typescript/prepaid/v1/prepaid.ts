//
// This file is AUTO-GENERATED by protoc-gen-ts.
// Do not modify it manually.
///
import api from '../../api'
import * as googleTypes from '../../googleTypes'
import { Empty as arangodb_cloud_common_v1_Empty } from '../../common/v1/common'
import { IDOptions as arangodb_cloud_common_v1_IDOptions } from '../../common/v1/common'
import { Version as arangodb_cloud_common_v1_Version } from '../../common/v1/common'
import { Deployment as arangodb_cloud_data_v1_Deployment } from '../../data/v1/data'

// File: prepaid/v1/prepaid.proto
// Package: arangodb.cloud.prepaid.v1
export interface CloneFromBackupRequest {
  // string
  prepaid_deployment_id?: string;
  
  // string
  backup_id?: string;
}
export interface CreateDeploymentRequest {
  // Identifier of prepaid deployment
  // string
  prepaid_deployment_id?: string;
  
  // Identifier of the project that owns this deployment.
  // After creation, this value cannot be changed.
  // string
  project_id?: string;
  
  // Optional identifier of IP allowlist to use for this deployment.
  // string
  ipallowlist_id?: string;
  
  // ArangoDB version to use for this deployment.
  // See Version.version.
  // If you change this value to a higher version,
  // the deployment will be upgraded.
  // If you change this value to a lower patch value,
  // the deployment will be downgraded.
  // Any attempt to change to a lower minor or major version
  // is considered an invalid request.
  // Any attempt to change to a version that is not in the
  // list of available versions is considered an invalid request.
  // string
  version?: string;
  
  // CreateDeploymentRequest_CertificateSpec
  certificates?: CreateDeploymentRequest_CertificateSpec;
}
export interface CreateDeploymentRequest_CertificateSpec {
  // Identifier of the CACertificate used to sign TLS certificates for the deployment.
  // If you change this value after the creation of the deployment a complete
  // rotation of the deployment is required, which will result in some downtime.
  // string
  ca_certificate_id?: string;
  
  // Zero or more DNS names to include in the TLS certificate of the deployment.
  // string
  alternate_dns_names?: string[];
}
export interface ListPrepaidDeploymentsRequest {
  // string
  organization_id?: string;
}

// A PrepaidDeployment contains all attributes of a future deployment that is already paid for.
export interface PrepaidDeployment {
  // System identifier of the prepaid deployment.
  // This is a read-only value.
  // string
  id?: string;
  
  // URL of this resource
  // This is a read-only value.
  // string
  url?: string;
  
  // this is a name of prepaid deployment, not related to created deployment
  // string
  name?: string;
  
  // this is an optional description for prepaid deployment, not related to created deployment
  // string
  description?: string;
  
  // Identifier of the region in which the deployment is created.
  // After creation, this value cannot be changed.
  // string
  region_id?: string;
  
  // The creation timestamp of the deployment
  // This is a read-only value.
  // googleTypes.Timestamp
  created_at?: googleTypes.Timestamp;
  
  // The deletion timestamp of the deployment
  // This is a read-only value.
  // googleTypes.Timestamp
  deleted_at?: googleTypes.Timestamp;
  
  // Set when this deployment is deleted.
  // This is a read-only value.
  // boolean
  is_deleted?: boolean;
  
  // When the prepaid deployment was bought
  // googleTypes.Timestamp
  starts_at?: googleTypes.Timestamp;
  
  // When the prepaid deployment is paid to.
  // googleTypes.Timestamp
  ends_at?: googleTypes.Timestamp;
  
  // Identifier of the support plan selected for this prepaid deployment.
  // string
  support_plan_id?: string;
  
  // PrepaidDeployment_ServersSpec
  servers?: PrepaidDeployment_ServersSpec;
  
  // PrepaidDeployment_ModelSpec
  model?: PrepaidDeployment_ModelSpec;
  
  // PrepaidDeployment_Status
  status?: PrepaidDeployment_Status;
}
export interface PrepaidDeployment_ModelSpec {
  // Type of model being used
  // string
  model?: string;
  
  // Size of nodes being used
  // This field is ignored set in case the flexible model is used.
  // string
  node_size_id?: string;
  
  // Number of nodes being used
  // This field is ignored set in case the flexible model is used.
  // number
  node_count?: number;
  
  // Amount of disk space per node (in GB)
  // This field is ignored set in case the flexible model is used.
  // number
  node_disk_size?: number;
}
export interface PrepaidDeployment_ServersSpec {
  // Number of coordinators of the deployment
  // This field is automatically set unless the flexible model is used.
  // number
  coordinators?: number;
  
  // Amount of memory (in GB) to allocate for coordinators.
  // This field is automatically set unless the flexible model is used.
  // number
  coordinator_memory_size?: number;
  
  // Custom command line arguments passed to all coordinators.
  // This field is ignored set unless the flexible model is used.
  // string
  coordinator_args?: string[];
  
  // Number of dbservers of the deployment
  // This field is automatically set unless the flexible model is used.
  // number
  dbservers?: number;
  
  // Amount of memory (in GB) to allocate for dbservers.
  // This field is automatically set unless the flexible model is used.
  // number
  dbserver_memory_size?: number;
  
  // Amount of disk space (in GB) to allocate for dbservers.
  // This field is automatically set unless the flexible model is used.
  // number
  dbserver_disk_size?: number;
  
  // Custom command line arguments passed to all dbservers.
  // This field is ignored set unless the flexible model is used.
  // string
  dbserver_args?: string[];
  
  // The minimum number of dbservers based on the highest replication factor
  // defined by all databases and all collections.
  // number
  minimum_dbservers_count?: number;
}

// Status of the prepaid deployment
// All members of this field are read-only.
export interface PrepaidDeployment_Status {
  // string
  deployment_id?: string;
}
export interface PrepaidDeploymentList {
  // PrepaidDeployment
  items?: PrepaidDeployment[];
}
export interface UpdateDeploymentRequest {
  // string
  prepaid_deployment_id?: string;
}

// PrepaidService is the API used to configure prepaid objects.
export interface IPrepaidService {
  // Get the current API version of this service.
  // Required permissions:
  // - None
  GetAPIVersion: (req?: arangodb_cloud_common_v1_Empty) => Promise<arangodb_cloud_common_v1_Version>;
  
  // Fetch all prepaid deployments for organization.
  // Required permissions:
  // - prepaid.deployment.list on the organization
  ListPrepaidDeployments: (req: ListPrepaidDeploymentsRequest) => Promise<PrepaidDeploymentList>;
  
  // Fetch a deployment by its id.
  // Required permissions:
  // - prepaid.deployment.get on the deployment identified by the given ID
  GetPrepaidDeployment: (req: arangodb_cloud_common_v1_IDOptions) => Promise<PrepaidDeployment>;
  
  // Creates a new deployment from a prepaid deployment and attached the newly created deployment to the prepaid deployment.
  // Required permissions:
  // - prepaid.deployment.create on the organization that owns the deployment
  CreateDeployment: (req: CreateDeploymentRequest) => Promise<arangodb_cloud_data_v1_Deployment>;
  
  // Update the deployment by prepaid deployment's id
  // Required permissions:
  // - prepaid.deployment.update on the organization that owns the deployment
  UpdateDeployment: (req: UpdateDeploymentRequest) => Promise<arangodb_cloud_data_v1_Deployment>;
  
  // Creates a cloned deployment from a backup and attaches it to the prepaid deployment. This takes the deployment specification from the prepaid deployment, which must match the specification mentioned in the backup.
  // Required permissions:
  // - prepaid.deployment.create on the organization that owns the deployment
  CloneDeploymentFromBackup: (req: CloneFromBackupRequest) => Promise<arangodb_cloud_data_v1_Deployment>;
}

// PrepaidService is the API used to configure prepaid objects.
export class PrepaidService implements IPrepaidService {
  // Get the current API version of this service.
  // Required permissions:
  // - None
  async GetAPIVersion(req?: arangodb_cloud_common_v1_Empty): Promise<arangodb_cloud_common_v1_Version> {
    const path = `/api/prepaid/v1/api-version`;
    const url = path + api.queryString(req, []);
    return api.get(url, undefined);
  }
  
  // Fetch all prepaid deployments for organization.
  // Required permissions:
  // - prepaid.deployment.list on the organization
  async ListPrepaidDeployments(req: ListPrepaidDeploymentsRequest): Promise<PrepaidDeploymentList> {
    const path = `/api/prepaid/v1/deployments`;
    const url = path + api.queryString(req, []);
    return api.get(url, undefined);
  }
  
  // Fetch a deployment by its id.
  // Required permissions:
  // - prepaid.deployment.get on the deployment identified by the given ID
  async GetPrepaidDeployment(req: arangodb_cloud_common_v1_IDOptions): Promise<PrepaidDeployment> {
    const path = `/api/prepaid/v1/prepaiddeployments/${encodeURIComponent(req.id || '')}`;
    const url = path + api.queryString(req, [`id`]);
    return api.get(url, undefined);
  }
  
  // Creates a new deployment from a prepaid deployment and attached the newly created deployment to the prepaid deployment.
  // Required permissions:
  // - prepaid.deployment.create on the organization that owns the deployment
  async CreateDeployment(req: CreateDeploymentRequest): Promise<arangodb_cloud_data_v1_Deployment> {
    const url = `/api/prepaid/v1/prepaiddeployments/${encodeURIComponent(req.prepaid_deployment_id || '')}/create`;
    return api.post(url, req);
  }
  
  // Update the deployment by prepaid deployment's id
  // Required permissions:
  // - prepaid.deployment.update on the organization that owns the deployment
  async UpdateDeployment(req: UpdateDeploymentRequest): Promise<arangodb_cloud_data_v1_Deployment> {
    const url = `/api/prepaid/v1/prepaiddeployments/${encodeURIComponent(req.prepaid_deployment_id || '')}/update`;
    return api.post(url, req);
  }
  
  // Creates a cloned deployment from a backup and attaches it to the prepaid deployment. This takes the deployment specification from the prepaid deployment, which must match the specification mentioned in the backup.
  // Required permissions:
  // - prepaid.deployment.create on the organization that owns the deployment
  async CloneDeploymentFromBackup(req: CloneFromBackupRequest): Promise<arangodb_cloud_data_v1_Deployment> {
    const url = `/api/prepaid/v1/prepaiddeployments/${encodeURIComponent(req.prepaid_deployment_id || '')}/clone`;
    return api.post(url, req);
  }
}
