//
// This file is AUTO-GENERATED by protoc-gen-ts.
// Do not modify it manually.
///
import api from '../../api'
import * as googleTypes from '../../googleTypes'
import { Empty as arangodb_cloud_common_v1_Empty } from '../../common/v1/common'
import { IDOptions as arangodb_cloud_common_v1_IDOptions } from '../../common/v1/common'
import { ListOptions as arangodb_cloud_common_v1_ListOptions } from '../../common/v1/common'
import { Version as arangodb_cloud_common_v1_Version } from '../../common/v1/common'

// File: notebook/v1/notebook.proto
// Package: arangodb.cloud.notebook.v1

// Contains details for the current state of the notebook.
export interface Condition {
  // Type of condition being reported.
  // Should be one of the following:
  // - Paused
  // - Stopped
  // string
  type?: string;
  
  // Status of the condition, one of true or false.
  // boolean
  status?: boolean;
  
  // Identifier of the entity responsible for the conditions's last transition.
  // string
  triggered_by?: string;
  
  // Reason for the condition's last transition.
  // string
  reason?: string;
  
  // The last time the condition transitioned from one status to another.
  // googleTypes.Timestamp
  last_transition_time?: googleTypes.Timestamp;
}

// Request for creating a notebook.
export interface CreateNotebookRequest {
  // ID of the Deployment this notebook belongs to.
  // string
  deployment_id?: string;
  
  // Configuration of the notebook instance.
  // Spec
  spec?: Spec;
}

// Request for listing notebooks.
export interface ListNotebookRequest {
  // List notebooks for this deployment ID.
  // string
  deployment_id?: string;
  
  // Optional common list options, the context_id is ignored
  // arangodb.cloud.common.v1.ListOptions
  options?: arangodb_cloud_common_v1_ListOptions;
}

// Contains the specification and status of a given notebook instance.
export interface Notebook {
  // ID of the Notebook.
  // string
  id?: string;
  
  // ID of the Deployment this notebook belongs to.
  // string
  deployment_id?: string;
  
  // Set if the notebook should be stopped.
  // boolean
  stopped?: boolean;
  
  // Identifier of the entity responsible for stopping the notebook.
  // string
  stopped_by?: string;
  
  // Set if the notebook should be paused.
  // boolean
  paused?: boolean;
  
  // Identifier of the entity responsible for pausing the notebook.
  // string
  paused_by?: string;
  
  // Configuration of the notebook instance.
  // Spec
  spec?: Spec;
  
  // Status of the notebook.
  // Note: all fields in this block are read-only.
  // Status
  status?: Status;
}

// List of Notebooks.
export interface NotebookList {
  // Notebook
  items?: Notebook[];
}

// Specification options for a notebook.
export interface Spec {
  // Number of CPU units required by the notebook instance.
  // number
  CPU?: number;
  
  // Memory required by the notebook instance.
  // Should be expressed as power-of-two: Mi, Gi, Ti, Pi, etc.
  // string
  memory?: string;
  
  // Disk space required by the notebook instance.
  // Should be expressed as power-of-two: Mi, Gi, Ti, Pi, etc.
  // string
  disk?: string;
}

// Status of the notebook.
// Note: all fields in this block are read-only.
export interface Status {
  // Where the notebook is in its lifecycle at any given time.
  // Should only contain only one of the following values:
  // "Initialising"   - Notebook is initialising.
  // "Running"        - Notebook is running.
  // "Error"          - Notebook is in an errored state. Additional information can be obtained from `message` field.
  // string
  phase?: string;
  
  // Supporting information about the notebook phase - such as error messages in case of failures.
  // string
  message?: string;
  
  // The last time the notebook was updated.
  // googleTypes.Timestamp
  last_updated_at?: googleTypes.Timestamp;
  
  // Contains details for the current state of the notebook.
  // Condition
  conditions?: Condition[];
}

// Notebook service is used to manage notebooks.
export interface INotebookService {
  // Get the current API version of this service.
  // Required permissions:
  // - None
  GetAPIVersion: (req?: arangodb_cloud_common_v1_Empty) => Promise<arangodb_cloud_common_v1_Version>;
  
  // Get a Notebook using its ID.
  // Required permissions:
  // - notebook.notebook.get
  GetNotebook: (req: arangodb_cloud_common_v1_IDOptions) => Promise<Notebook>;
  
  // Create a new Notebook by specifying its configuration.
  // Required permissions:
  // - notebook.notebook.create
  CreateNotebook: (req: CreateNotebookRequest) => Promise<void>;
  
  // Delete an existing notebook using its ID.
  // Required permissions:
  // - notebook.notebook.delete
  DeleteNotebook: (req: arangodb_cloud_common_v1_IDOptions) => Promise<void>;
  
  // Stop a running notebook.
  // Required permissions:
  // - notebook.notebook.stop
  StopNotebook: (req: arangodb_cloud_common_v1_IDOptions) => Promise<void>;
  
  // Pause a running notebook.
  // Required permissions:
  // - notebook.notebook.pause
  PauseNotebook: (req: arangodb_cloud_common_v1_IDOptions) => Promise<void>;
  
  // List all notebooks for a deployment.
  // Required permissions:
  // - notebook.notebook.list
  ListNotebooks: (req: ListNotebookRequest) => Promise<NotebookList>;
}

// Notebook service is used to manage notebooks.
export class NotebookService implements INotebookService {
  // Get the current API version of this service.
  // Required permissions:
  // - None
  async GetAPIVersion(req?: arangodb_cloud_common_v1_Empty): Promise<arangodb_cloud_common_v1_Version> {
    const path = `/api/notebook/v1/api-version`;
    const url = path + api.queryString(req, []);
    return api.get(url, undefined);
  }
  
  // Get a Notebook using its ID.
  // Required permissions:
  // - notebook.notebook.get
  async GetNotebook(req: arangodb_cloud_common_v1_IDOptions): Promise<Notebook> {
    const path = `/api/notebook/v1/notebook/${encodeURIComponent(req.id || '')}`;
    const url = path + api.queryString(req, [`id`]);
    return api.get(url, undefined);
  }
  
  // Create a new Notebook by specifying its configuration.
  // Required permissions:
  // - notebook.notebook.create
  async CreateNotebook(req: CreateNotebookRequest): Promise<void> {
    const url = `/api/notebook/v1/notebook`;
    return api.put(url, req);
  }
  
  // Delete an existing notebook using its ID.
  // Required permissions:
  // - notebook.notebook.delete
  async DeleteNotebook(req: arangodb_cloud_common_v1_IDOptions): Promise<void> {
    const path = `/api/notebook/v1/notebook/${encodeURIComponent(req.id || '')}`;
    const url = path + api.queryString(req, [`id`]);
    return api.delete(url, undefined);
  }
  
  // Stop a running notebook.
  // Required permissions:
  // - notebook.notebook.stop
  async StopNotebook(req: arangodb_cloud_common_v1_IDOptions): Promise<void> {
    const path = `/api/notebook/v1/notebook/${encodeURIComponent(req.id || '')}/stop`;
    const url = path + api.queryString(req, [`id`]);
    return api.post(url, undefined);
  }
  
  // Pause a running notebook.
  // Required permissions:
  // - notebook.notebook.pause
  async PauseNotebook(req: arangodb_cloud_common_v1_IDOptions): Promise<void> {
    const path = `/api/notebook/v1/notebook/${encodeURIComponent(req.id || '')}/pause`;
    const url = path + api.queryString(req, [`id`]);
    return api.post(url, undefined);
  }
  
  // List all notebooks for a deployment.
  // Required permissions:
  // - notebook.notebook.list
  async ListNotebooks(req: ListNotebookRequest): Promise<NotebookList> {
    const url = `/api/notebook/v1/notebooks`;
    return api.post(url, req);
  }
}
