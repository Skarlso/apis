// 
// DISCLAIMER
// 
// Copyright 2019 ArangoDB Inc, Cologne, Germany
// 
// Author Ewout Prangsma
// 

syntax = "proto3";

package arangodb.cloud.iam.v1;

option go_package = "github.com/arangodb-managed/apis/iam/v1";

import "common/v1/common.proto";

import "github.com/golang/protobuf/ptypes/timestamp/timestamp.proto";
import "google/api/annotations.proto";

// IAMService is the API used to configure IAM objects.
service IAMService {
    // Fetch all available information of the currently authenticated user.
    // Required permissions:
    // - None
    rpc GetThisUser(common.v1.Empty) returns (User) {
        option (google.api.http) = {
            get: "/api/iam/v1/self/user"
        };
    }

    // Fetch all available information of the user identified by the given ID.
    // Required permissions:
    // - resourcemanager.organization.get on one of the organizations that the requested user and authenticated user are both a member of
    rpc GetUser(common.v1.IDOptions) returns (User) {
        option (google.api.http) = {
            get: "/api/iam/v1/users/{id}"
        };
    }

    // Update a user
    // Required permissions:
    // - None if the given user is the authenticated user.
    // or
    // - resourcemanager.organization.get on one of the organizations that the requested user and authenticated user are both a member of and
    // - iam.user.update on organization on one of the organizations that the requested user and authenticated user are both a member of
    rpc UpdateUser(User) returns (User) {
        option (google.api.http) = {
            patch: "/api/iam/v1/users/{id}"
            body: "*"
        };
    }

    // Verify the mobile phone number of a user, by provided the unique
    // code that was send to the number.
    // If the code is valid an empty result is returned, otherwise an InvalidArgument error is returned.
    // The authenticated user is always the subject of this request.
    // Required permissions:
    // - None (since the subject is always the authenticated user).
    rpc VerifyUserMobilePhone(VerifyUserMobilePhoneRequest) returns (common.v1.Empty) {
        option (google.api.http) = {
            post: "/api/iam/v1/user-mobile-phone/verify"
            body: "*"
        };
    }

    // Resend a verification code to the mobile phone number listed for the
    // authenticated user.
    // Required permissions:
    // - None (since the subject is always the authenticated user).
    rpc ResendUserMobilePhoneVerification(common.v1.Empty) returns (common.v1.Empty) {
        option (google.api.http) = {
            post: "/api/iam/v1/user-mobile-phone/resend"
            body: "*"
        };
    }

    // Fetch all groups of the organization identified by the given context ID.
    // Required permissions:
    // - iam.group.list on organization identified by given context ID.
    rpc ListGroups(common.v1.ListOptions) returns (GroupList) {
        option (google.api.http) = {
            get: "/api/iam/v1/organizations/{context_id}/groups"
        };
    }
    
    // Fetch a group by its id.
    // Required permissions:
    // - iam.group.get on organization that owns the group
    rpc GetGroup(common.v1.IDOptions) returns (Group) {
        option (google.api.http) = {
            get: "/api/iam/v1/groups/{id}"
        };
    }

    // Create a group
    // Required permissions:
    // - iam.group.create on organization that owns the group
    rpc CreateGroup(Group) returns (Group) {
        option (google.api.http) = {
            post: "/api/iam/v1/organizations/{organization_id}/groups"
            body: "*"
        };
    }

    // Update a group
    // Required permissions:
    // - iam.group.update on organization that owns the group
    rpc UpdateGroup(Group) returns (Group) {
        option (google.api.http) = {
            patch: "/api/iam/v1/groups/{id}"
            body: "*"
        };
    }

    // Delete a group
    // Required permissions:
    // - iam.group.delete on organization that owns the group
    rpc DeleteGroup(common.v1.IDOptions) returns (common.v1.Empty) {
        option (google.api.http) = {
            delete: "/api/iam/v1/groups/{id}"
        };
    }

    // List of members of the group identified by the given context ID.
    // Required permissions:
    // - iam.group.get on organization that owns the group
    rpc ListGroupMembers(common.v1.ListOptions) returns (GroupMemberList) {
        option (google.api.http) = {
            get: "/api/iam/v1/groups/{context_id}/members"
        };
    }

    // Add one or more members to the group identified by given ID.
    // Required permissions:
    // - iam.group.update on organization that owns the group
    rpc AddGroupMembers(GroupMembersRequest) returns (common.v1.Empty) {
        option (google.api.http) = {
            post: "/api/iam/v1/groups/{group_id}/members"
            body: "*"
        };
    }

    // Remove one or more members from the group identified by given ID.
    // Required permissions:
    // - iam.group.update on organization that owns the group
    rpc DeleteGroupMembers(GroupMembersRequest) returns (common.v1.Empty) {
        option (google.api.http) = {
            delete: "/api/iam/v1/groups/{group_id}/members"
            body: "*"
        };
    }

    // Is the user identified by the given user ID a member of the group identified by the given group ID.
    // Required permissions:
    // - iam.group.get on organization that owns the group, unless the requested user is identical to the authenticated user.
    // Note that if the identified group does not exist, no is returned.
    rpc IsMemberOfGroup(IsMemberOfGroupRequest) returns (common.v1.YesOrNo) {
        option (google.api.http) = {
            get: "/api/iam/v1/groups/{group_id}/members/{user_id}"
        };
    }

    // Fetch all roles in the organization identified by the given context ID.
    // Required permissions:
    // - iam.role.list on organization identified by given context ID.
    rpc ListRoles(common.v1.ListOptions) returns (RoleList) {
        option (google.api.http) = {
            get: "/api/iam/v1/organizations/{context_id}/roles"
        };
    }

    // Fetch a role by its id.
    // Required permissions:
    // - iam.role.get on organization that owns the role
    rpc GetRole(common.v1.IDOptions) returns (Role) {
        option (google.api.http) = {
            get: "/api/iam/v1/roles/{id}"
        };
    }

    // Create a custom role
    // Required permissions:
    // - iam.role.create on organization that owns the role
    rpc CreateRole(Role) returns (Role) {
        option (google.api.http) = {
            post: "/api/iam/v1/organizations/{organization_id}/roles"
            body: "*"
        };
    }

    // Update a custom role
    // Required permissions:
    // - iam.role.update on organization that owns the role
    rpc UpdateRole(Role) returns (Role) {
        option (google.api.http) = {
            patch: "/api/iam/v1/roles/{id}"
            body: "*"
        };
    }

    // Delete a custom role
    // Required permissions:
    // - iam.role.delete on organization that owns the role
    rpc DeleteRole(common.v1.IDOptions) returns (common.v1.Empty) {
        option (google.api.http) = {
            delete: "/api/iam/v1/roles/{id}"
        };
    }
    
    // Get the policy for a resource identified by given URL.
    // Required permissions:
    // - iam.policy.get on resource identified by the url
    rpc GetPolicy(common.v1.URLOptions) returns (Policy) {
        option (google.api.http) = {
            get: "/api/iam/v1/policies"
        };
    }

    // Add one or more RoleBindings to the policy of a resource identified by given URL.
    // Required permissions:
    // - iam.policy.update on resource identified by the url
    rpc AddRoleBindings(RoleBindingsRequest) returns (Policy) {
        option (google.api.http) = {
            post: "/api/iam/v1/policies/bindings"
            body: "*"
        };
    }

    // Remove one or more RoleBindings from the policy of a resource identified by given URL.
    // Required permissions:
    // - iam.policy.update on resource identified by the url
    rpc DeleteRoleBindings(RoleBindingsRequest) returns (Policy) {
        option (google.api.http) = {
            delete: "/api/iam/v1/policies/bindings"
            body: "*"
        };
    }

    // Return the list of permissions that are available to the currently authenticated
    // used for actions on the resource identified by the given URL.
    // Required permissions:
    // - None
    rpc GetEffectivePermissions(common.v1.URLOptions) returns (PermissionList) {
        option (google.api.http) = {
            get: "/api/iam/v1/policies/effective-permissions"
        };
    }

    // Does the authenticated user have all of the requested permissions for the resource
    // identified by the given URL?
    // Required permissions:
    // - None
    rpc HasPermissions(HasPermissionsRequest) returns (common.v1.YesOrNo) {
        option (google.api.http) = {
            get: "/api/iam/v1/policies/permissions"
        };
    }

    // List all known permissions.
    // Required permissions:
    // - None
    rpc ListPermissions(common.v1.Empty) returns (PermissionList) {
        option (google.api.http) = {
            get: "/api/iam/v1/permissions"
        };
    }
}

// User represents an actual person.
message User {
    // Identifier of the user.
    // This is a read-only value.
    string id = 1;
    // Primary email address of the user.
    // All emails send to this user will use this address.
    // This is a read-only value.
    string email = 2;
    // Name of the user.
    // This may be empty if not filled out by the user.
    string name = 3;
    // Given name of the user.
    // This may be empty if not filled out by the user.
    string given_name = 4;
    // Family name of the user.
    // This may be empty if not filled out by the user.
    string family_name = 5;
    // The creation timestamp of the user.
    // This is a read-only value.
    google.protobuf.Timestamp created_at = 6;
    // Additional email addresses of the user.
    // This will be filled in when the authentication provided
    // knows multiple email addresses for the user.
    // This is a read-only value.
    repeated string additional_emails = 7;
    // Mobile phone number of the user.
    // This value must be unique globally.
    //
    // This field will not be filled, unless:
    // - The currently authenticated user is this user
    // - The currently authenticated user has `iam.user.get-personal-data` permission 
    //   on the organization that user is a member of.
    // 
    // This value can only be changed to a non-empty value.
    // If changed, the new number has to be verified again.
    string mobile_phone = 8;
    // Set when the mobile phone number has been successfully verified.
    // This is a read-only value.
    bool mobile_phone_verified = 9;
    // Company name of the user
    // This may be empty if not filled out by the user.
    string company_name = 10;
    // If set, this user is denied access to the dashboard.
    // This is a read-only value.
    bool dashboard_access_denied = 11;
    // If set, this field describes the reason why this user is denied access to the dashboard.
    // This is a read-only value.
    string dashboard_access_denied_reason = 12;
}

// Request arguments for VerifyUserMobilePhone
message VerifyUserMobilePhoneRequest {
    // Code that was send to the mobile phone number.
    string code = 1;
}

// Group of user accounts.
message Group {
    // System identifier of the group.
    // This is a read-only value.
    string id = 1;
    // Identifier of the organization that owns this group.
    string organization_id = 2;
    // Name of the group
    string name = 3; 
    // Description of the group
    string description = 4; 
    // The creation timestamp of the group
    google.protobuf.Timestamp created_at = 5;
    // The deletion timestamp of the group
    google.protobuf.Timestamp deleted_at = 6;
    // Set when this organization is deleted.
    // This is a read-only value.
    bool is_deleted = 7;
    // URL of this resource
    // This is a read-only value and cannot be initialized.
    string url = 8;
    // Set if this group is virtual and managed by the system.
    // This is a read-only value.
    bool is_virtual = 9;
}

// List of groups.
message GroupList {
    repeated Group items = 1;
}

// Request arguments for IsMemberOfGroup.
message IsMemberOfGroupRequest {
    // Identifier of the user
    string user_id = 1;
    // Identifier of the group
    string group_id = 2;
}

// List of group members (user ID's)
message GroupMemberList {
    // List of ID's of users that are member of the group.
    repeated string items = 1;
}

// Request arguments for Add/DeleteGroupMembers.
message GroupMembersRequest {
    // ID of the group to add/remove members to/from.
    string group_id = 1;
    // ID's of users to add/remove to/from the group.
    repeated string user_ids = 2;    
}

// List of permissions.
message PermissionList {
    repeated string items = 1;
}

// Request arguments for HasPermissionsRequest.
message HasPermissionsRequest {
    // URL of the resource to query permissions for.
    string url = 1;
    // The list of permissions that are required.
    repeated string permissions = 2;
}

// A role is a list of permissions.
// Roles can be bound to resources for members.
message Role {   
    // System identifier of the role.
    // This is a read-only value.
    string id = 1;
    // Identifier of the organization that owns this role.
    // This value is undefined for predefined roles.
    string organization_id = 2;
    // Name of the role
    string name = 3; 
    // Description of the role
    string description = 4; 
    // Permissions to grant when this role is bound.
    repeated string permissions = 5;
    // Set if this role is predefined.
    // This is a read-only value.
    bool is_predefined = 6;
    // The creation timestamp of the role
    google.protobuf.Timestamp created_at = 7;
    // The deletion timestamp of the role
    google.protobuf.Timestamp deleted_at = 8;
    // Set when this organization is deleted.
    // This is a read-only value.
    bool is_deleted = 9;
    // URL of this resource
    // This is a read-only value and cannot be initialized.
    string url = 10;
}

// List of roles.
message RoleList {
    repeated Role items = 1;
}

// RoleBinding binds a Role to a member.
message RoleBinding {
    // System identifier of the role-binding.
    // This is a read-only value.
    string id = 1;
    // Identifier of the member to bind a role to.
    // Member ID is formatted as:
    // - user:<user_id>
    // - group:<group_id>
    string member_id = 2;
    // Identifier of the Role to grant to member
    string role_id = 3;
}

// Policy bindings members to roles for access to a resource.
message Policy {
    // URL of the resource to which this policy applies.
    string resource_url = 1;
    // Role bindings to apply to the resource.
    repeated RoleBinding bindings = 2;
}

// Request arguments for Add/DeleteRoleBindings.
message RoleBindingsRequest {
    // URL of the resource to add/remove policy binding to/from.
    string resource_url = 1;
    // Role bindings to add/remove to the policy.
    repeated RoleBinding bindings = 2;    
}
