// 
// DISCLAIMER
// 
// Copyright 2019 ArangoDB GmbH, Cologne, Germany
// 
// Author Ewout Prangsma
// 

syntax = "proto3";

package arangodb.cloud.support.v1;

option go_package = "github.com/arangodb-managed/apis/support/v1";

import "common/v1/common.proto";

import "google/api/annotations.proto";

// SupportService is the API used to query for support.
service SupportService {
    // Get the current API version of this service.
    // Required permissions:
    // - None
    rpc GetAPIVersion(common.v1.Empty) returns (common.v1.Version) {
        option (google.api.http) = {
            get: "/api/support/v1/api-version"
        };
    }

    // Fetch all support plans that are supported by the ArangoDB cloud.
    // Required permissions:
    // - None
    rpc ListPlans(ListPlansRequest) returns (PlanList) {
        option (google.api.http) = {
            get: "/api/support/v1/plans"
        };
    }
    
    // Fetch a support plan by its id.
    // Required permissions:
    // - None
    rpc GetPlan(common.v1.IDOptions) returns (Plan) {
        option (google.api.http) = {
            get: "/api/support/v1/plans/{id}"
        };
    }

    // Fetch all FAQ groups.
    // Required permissions:
    // - None
    rpc ListFaqGroups(common.v1.ListOptions) returns (FaqGroupList) {
        option (google.api.http) = {
            get: "/api/support/v1/faqgroups"
        };
    }

    // Fetch all FAQ group entries of the FAQ group identified by the given context ID.
    // Required permissions:
    // - None
    rpc ListFaqGroupEntries(common.v1.ListOptions) returns (FaqGroupEntryList) {
        option (google.api.http) = {
            get: "/api/support/v1/faqgroups/{context_id}/entries"
        };
    }

    // Submit a support ticket to JIRA
    // Required permissions:
    // - None
    rpc SubmitSupportTicket(SupportTicketRequest) returns (common.v1.Empty) {
        option (google.api.http) = {
            post: "/api/support/v1/support/submit-ticket"
            body: "*"
        };
    }
}

// SupportTicketRequest contains information about the ticket
message SupportTicketRequest {
    // username of the user submitting the ticket
    string username = 1;
    // authenticated_id is provided if the user submitting the ticket is authenticated
    string authenticated_id = 2;
    // email_address of the user submitting the ticket
    string email_address = 3;
    // organization_id is provided if applicable to the issue
    string organization_id = 4;
    // project_id is provided if applicable to the issue
    string project_id = 5;
    // deployment_id is provided if applicable to the issue
    string deployment_id = 6;
    // description of the issue.
    string description = 7;
    // severity can be one of these four below
    enum Severity {
        LOW = 0;
        NORMAL = 1;
        HIGH = 2;
        CRITICAL = 3;
    }
    Severity severity = 8;
    // This field should be set to Production Support
    // Read-only
    string support_type=9;
}

// Plan represents a specific support plan such as Bronze, Silver or Gold.
message Plan {
    // System identifier of the plan.
    string id = 1;
    // Name of the plan.
    string name = 2; 
    // If set, this plan is the default support plan.
    bool is_default = 3;
    // Human readable description of the plan
    string description = 4;
    // If set, this plan is shown, but not selectable.
    bool is_unavailable = 5;
    // SLA times to first response for various situations.
    // When this plan is unavailable, this field is optional.
    ResponseTimes first_response_times = 6;
}

// Response for various categories on situations.
// All values are in minutes.
// A value of 0 means "best effort".
message ResponseTimes {
    // Response time for operation-impeding Error in a production environment.
    int32 critical = 1;
    // Response time for operation-limiting error.
    int32 high = 2;
    // Response time for minor error.
    int32 normal = 3;
    // Response time for usage question.
    int32 low = 4;
}

// List of plans.
message PlanList {
    repeated Plan items = 1;
}

// Arguments for a ListPlans request
message ListPlansRequest {
    // Common list options
    common.v1.ListOptions options = 1;
    // If set, list plans as they are available for the organization identified by this ID.
    string organization_id = 2;
}

// FaqGroup contains groups of faq entries
message FaqGroup {
    // ID of the FAQ Group
    string id = 1;
    // Name of the FAQ Group
    string name = 2;
}

// List of faq groups.
message FaqGroupList {
    repeated FaqGroup items = 1;
}

// FaqGroupEntry contains entries for a group
message FaqGroupEntry {
    // The question of this entry
    string question = 1;
    // The answer to the question in this entry
    string answer = 2;
}

// List of faq group entries.
message FaqGroupEntryList {
    repeated FaqGroupEntry items = 1;
}
